@page "/linear-gauge/axes-and-pointers"

@using Syncfusion.Blazor.LinearGauge
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons

@inherits SampleBaseComponent;


<div class="col-lg-9 control-section sb-property-border">
        <SfLinearGauge Orientation="Orientation.Horizontal" @ref="@linear">
            <LinearGaugeAxes>
                <LinearGaugeAxis ShowLastLabel="@GaugeLastLabel" Minimum="@GaugeMinimumValue" Maximum="@GaugeMaximumValue" IsInversed="@GaugeInversed" OpposedPosition="@GaugeOpposed">
                    <LinearGaugeAxisLabelStyle Offset="@GaugeLabelOffset" Format="@GaugeLabelFormat">
                    </LinearGaugeAxisLabelStyle>
                    <LinearGaugeMajorTicks Color="#9E9E9E" Interval="20" Height="20">
                    </LinearGaugeMajorTicks>
                    <LinearGaugeMinorTicks Color="#9E9E9E" Interval="2" Height="10">
                    </LinearGaugeMinorTicks>
                    <LinearGaugePointers>
                        <LinearGaugePointer Value="20" Height="15" Width="15" Placement="@GaugePointerPlacement" Offset="@GaugePointerOffset" MarkerType="@GaugeMarkerType" Type="@GaugePointerType" Color="#757575">
                        </LinearGaugePointer>
                    </LinearGaugePointers>
                </LinearGaugeAxis>
            </LinearGaugeAxes>
        </SfLinearGauge>
    </div>
<div class="col-md-3 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table style="width: 100%;">
                <tr>
                    <td style="width:50%">
                        <div style="padding-left: 10px; padding-top: 10px;">
                            Axis Minimum
                            <span>&nbsp;&nbsp;&nbsp;@MinimumValueText</span>
                        </div>
                    </td>
                    <td style="width:40%">
                        <div style="padding-left: 10px; padding-top: 10px;">
                            <input type="range" value="@MinimumValue" min="0" max="100" @onchange="MinimumChange" />
                        </div>
                    </td>
                </tr>
                <tr>
                    <td style="width:50%">
                        <div style="padding-left: 10px; padding-top: 10px;">
                            Axis Maximum
                            <span>&nbsp;&nbsp;&nbsp;@MaximumValueText</span>
                        </div>
                    </td>
                    <td style="width:40%">
                        <div style="padding-left: 10px; padding-top: 10px;">
                            <input type="range" value="@MaximumValue" min="0" max="100" @onchange="MaximumChange" />
                        </div>
                    </td>
                </tr>
                <tr>
                    <td style="width:50%">
                        <div style="padding-left: 10px; padding-top: 10px;">Axis Inversed</div>
                    </td>
                    <td style="width:40%">
                        <div style="padding-left: 10px; padding-top: 10px;">
                            <SfCheckBox Checked="@InveredChecked" ValueChange="@InversedChange"></SfCheckBox>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td style="width:50%">
                        <div style="padding-left: 10px; padding-top: 10px;">Axis Opposed</div>
                    </td>
                    <td style="width:40%">
                        <div style="padding-left: 10px; padding-top: 10px;">
                            <SfCheckBox Checked="@OpposedChecked" ValueChange="@OpposedChange"></SfCheckBox>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td style="width:50%">
                        <div style="padding-left: 10px; padding-top: 10px;">Show Last Label</div>
                    </td>
                    <td style="width:40%">
                        <div style="padding-left: 10px; padding-top: 10px;">
                            <SfCheckBox Checked="@LastLabelChecked" ValueChange="@LastLabelChange"></SfCheckBox>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td style="width:50%">
                        <div style="padding-left: 10px; padding-top: 10px;">Label Format</div>
                    </td>
                    <td style="width:40%">
                        <div class="e-float-input" style="margin-top: 0px; padding-left: 10px; padding-top: 10px;">
                            <SfTextBox Value="@LabelFormatValue" ValueChange='@LabelFormatChange'></SfTextBox>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td style="width:50%">
                        <div style="padding-left: 10px; padding-top: 10px;">Pointer type</div>
                    </td>
                    <td style="width:40%">
                        <div style="padding-left: 10px; padding-top: 10px;">
                            <SfDropDownList DataSource="@PointerTypeList" Value="@PointerTypeValue" Placeholder="Select Range Bar Color">
                                <DropDownListEvents ValueChange="pointerTypeChange" TValue="string"></DropDownListEvents>
                                <DropDownListFieldSettings text="Name" value="Name"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td style="width:50%">
                        <div style="padding-left: 10px; padding-top: 10px;">Marker Placement</div>
                    </td>
                    <td style="width:40%">
                        <div style="padding-left: 10px; padding-top: 10px;">
                            <SfDropDownList Enabled="@PlacementListEnable" DataSource="@PointerPlacementList" Value="@PlacementValue">
                                <DropDownListEvents ValueChange="placementTypeChange" TValue="string"></DropDownListEvents>
                                <DropDownListFieldSettings text="Name" value="Name"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                    </td>
                </tr>
            </table>
        </div>
    </div>
</div>

<style>
    #control-section {
        padding: 0px !important;
    }

    .padding-table td {
        width: 40%;
    }
</style>

@code {
    private String GaugePointerOffset = "30";
    private Double GaugeLabelOffset = 48;
    private Double GaugeMaximumValue = 115;
    private Double GaugeMinimumValue = 0;
    private Boolean GaugeInversed = false;
    private Boolean GaugeLastLabel = false;
    private Boolean GaugeOpposed = false;
    private String GaugeLabelFormat = "{ value }";
    private MarkerType GaugeMarkerType = MarkerType.InvertedTriangle;
    private Syncfusion.Blazor.LinearGauge.Placement GaugePointerPlacement = Syncfusion.Blazor.LinearGauge.Placement.Far;
    private Point GaugePointerType = Point.Marker;
    public String AnnotationText = "10 MPH";
    private Double AnnotationAxisvalue = 10;
    private Double MinimumValue = 0;
    private Double MaximumValue = 115;
    private Double MinimumValueText = 0;
    private Double MaximumValueText = 115;
    private Boolean InveredChecked = false;
    private Boolean LastLabelChecked = false;
    private Boolean OpposedChecked = false;
    private String LabelFormatValue = "{value}";
    private String PointerTypeValue = "Marker";
    private String PlacementValue = "Far";
    private Boolean PlacementListEnable = true;
    SfLinearGauge linear;
    public class DropDownData
    {
        public String Name { get; set; }
    }
    private List<DropDownData> PointerTypeList = new List<DropDownData>
    {
        new DropDownData{ Name = "Marker"},
        new DropDownData{ Name = "Bar"},
    };
    private List<DropDownData> PointerPlacementList = new List<DropDownData>
    {
        new DropDownData{ Name = "Far"},
        new DropDownData{ Name = "Near"},
        new DropDownData{ Name = "Center"},
        };

    private void MinimumChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        MinimumValue = Convert.ToDouble(args.Value);
        GaugeMinimumValue = MinimumValueText = MinimumValue;
        AnnotationAxisvalue = MinimumValue;
        AnnotationText = (MinimumValue + " MPH").ToString();
        GaugeMaximumValue = MaximumValue;
    }
    private void MaximumChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        MaximumValue = Convert.ToDouble(args.Value);
        GaugeMinimumValue = MinimumValue;
        AnnotationAxisvalue = MinimumValue;
        AnnotationText = (MinimumValue + " MPH").ToString();
        GaugeMaximumValue = MaximumValueText = MaximumValue;
    }
    private void InversedChange(Syncfusion.Blazor.Buttons.ChangeEventArgs args)
    {
        InveredChecked = GaugeInversed = args.Checked;
    }
    private void LastLabelChange(Syncfusion.Blazor.Buttons.ChangeEventArgs args)
    {
        LastLabelChecked = GaugeLastLabel = args.Checked;
    }
    private void OpposedChange(Syncfusion.Blazor.Buttons.ChangeEventArgs args)
    {
        OpposedChecked = GaugeOpposed = args.Checked;
        if (OpposedChecked)
        {
            GaugePointerPlacement = Syncfusion.Blazor.LinearGauge.Placement.Near;
            GaugeMarkerType = MarkerType.Triangle;
            GaugePointerOffset = "-20";
            GaugeLabelOffset = 0;
        }
        else
        {
            GaugePointerPlacement = Syncfusion.Blazor.LinearGauge.Placement.Far;
            GaugeMarkerType = MarkerType.InvertedTriangle;
            GaugePointerOffset = "30";
            GaugeLabelOffset = 50;
        }
    }
    private void LabelFormatChange(Syncfusion.Blazor.Inputs.ChangedEventArgs args)
    {
        LabelFormatValue = (args.Value).ToString();
        GaugeLabelFormat = LabelFormatValue;
    }
    private void pointerTypeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        PointerTypeValue = (args.Value).ToString();
        if (PointerTypeValue == "Marker") { GaugePointerType = Point.Marker; PlacementListEnable = true; }
        else { GaugePointerType = Point.Bar; PlacementListEnable = false; }
    }
    private void placementTypeChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        PlacementValue = (args.Value).ToString();
        if (PlacementValue == "Far") { GaugePointerPlacement = Syncfusion.Blazor.LinearGauge.Placement.Far; }
        else if (PlacementValue == "Near") { GaugePointerPlacement = Syncfusion.Blazor.LinearGauge.Placement.Near; }
        else { GaugePointerPlacement = Syncfusion.Blazor.LinearGauge.Placement.Center; }
    }
}
