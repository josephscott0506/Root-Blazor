@page "/circular-gauge/multiple-axis"

@using Syncfusion.Blazor.CircularGauge
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs

@inherits SampleBaseComponent;
<div class="col-lg-9 control-section sb-property-border">
        <SfCircularGauge Title="Gauge with Multiple Axes">
            <CircularGaugeTitleStyle Color="grey"></CircularGaugeTitleStyle>
            <CircularGaugeAxes>
                <CircularGaugeAxis Radius="95%" Minimum="0" Maximum="160" StartAngle="@FirstAxisStartangle" EndAngle="@FirstAxisEndangle" Direction="@firstaAxisDirection">
                    <CircularGaugeAxisLineStyle Width="1.5" Color="#9E9E9E">
                    </CircularGaugeAxisLineStyle>
                    <CircularGaugeAxisLabelStyle Position="Position.Inside" AutoAngle="true">
                    </CircularGaugeAxisLabelStyle>
                    <CircularGaugeAxisMajorTicks Position="Position.Inside" Width="2" Height="10" Color="#757575">
                    </CircularGaugeAxisMajorTicks>
                    <CircularGaugeAxisMinorTicks Position="Position.Inside" Width="2" Height="5" Color="#757575">
                    </CircularGaugeAxisMinorTicks>
                    <CircularGaugePointers>
                        <CircularGaugePointer Value="80" Radius="100%" Color="#333333" MarkerHeight="15" MarkerWidth="15" Type="PointerType.Marker" MarkerShape="GaugeShape.Triangle">
                            <CircularGaugePointerAnimation Enable="true">
                            </CircularGaugePointerAnimation>
                        </CircularGaugePointer>
                    </CircularGaugePointers>
                </CircularGaugeAxis>
                <CircularGaugeAxis Radius="95%" Minimum="0" Maximum="240" StartAngle="@SecondAxisStartangle" EndAngle="@SecondAxisEndangle" Direction="@secondAxisDirection">
                    <CircularGaugeAxisLineStyle Width="1.5" Color="#E84011">
                    </CircularGaugeAxisLineStyle>
                    <CircularGaugeAxisLabelStyle Position="Position.Outside" AutoAngle="true">
                        <CircularGaugeAxisLabelFont Color="#E84011"></CircularGaugeAxisLabelFont>
                    </CircularGaugeAxisLabelStyle>
                    <CircularGaugeAxisMajorTicks Position="Position.Outside" Width="2" Height="10" Color="#E84011">
                    </CircularGaugeAxisMajorTicks>
                    <CircularGaugeAxisMinorTicks Position="Position.Outside" Width="2" Height="5" Color="#E84011">
                    </CircularGaugeAxisMinorTicks>
                    <CircularGaugePointers>
                        <CircularGaugePointer Value="120" Radius="100%" Color="#C62E0A" MarkerHeight="15" MarkerWidth="15" Type="PointerType.Marker" MarkerShape="GaugeShape.InvertedTriangle">
                            <CircularGaugePointerAnimation Enable="true">
                            </CircularGaugePointerAnimation>
                        </CircularGaugePointer>
                    </CircularGaugePointers>
                </CircularGaugeAxis>
            </CircularGaugeAxes>
        </SfCircularGauge>
    </div>
<div class="col-md-3 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table  style="width: 100%">
                <tr>
                    <td>
                        <div> Axis </div>
                    </td>
                    <td>
                        <div>
                            <SfDropDownList DataSource="@AxisData" Value="@axisValue">
                                <DropDownListEvents TValue="string" ValueChange="@AxisChange"></DropDownListEvents>
                                <DropDownListFieldSettings Text="Name" Value="Name"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                    </td>
                </tr>&nbsp;
                <tr>
                    <td>
                        <div> Direction </div>
                    </td>
                    <td>
                        <div>
                            <SfDropDownList DataSource="@AxisDirectionData" Value="@axisDirectionValue">
                                <DropDownListEvents TValue="string" ValueChange="@AxisDirectionChange"></DropDownListEvents>
                                <DropDownListFieldSettings Text="Name" Value="Name"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                    </td>
                </tr>&nbsp;
                <tr>
                    <td>
                        <div>Start Angle <span> &nbsp;&nbsp;&nbsp;@startAngleValue</span> </div>
                    </td>
                    <td>
                        <div>
                            <input type="range" value="@startAngleValue" min="0" max="360" @onchange="StartAngleChange" />
                        </div>
                    </td>
                </tr>&nbsp;
                <tr>
                    <td>
                        <div>End Angle <span> &nbsp;&nbsp;&nbsp;@endAngleValue</span> </div>
                    </td>
                    <td>
                        <div>
                            <input type="range" value="@endAngleValue" min="0" max="360" @onchange="EndAngleChange" />
                        </div>
                    </td>
                </tr>&nbsp;
            </table>
        </div>
    </div>
</div>
<style>
    td {
        width: 40%;
    }
</style>

@code{
    private Double FirstAxisStartangle = 220;
    private Double SecondAxisStartangle = 220;
    private Double FirstAxisEndangle = 140;
    private Double SecondAxisEndangle = 140;
    private GaugeDirection firstaAxisDirection = GaugeDirection.ClockWise;
    private GaugeDirection secondAxisDirection = GaugeDirection.ClockWise;
    private String axisValue = "Axis1";
    private String axisDirectionValue = "ClockWise";
    private Double startAngleValue = 220;
    private Double endAngleValue = 140;
    public class Axis
    {
        public string Name { get; set; }
    }
    private List<Axis> AxisData = new List<Axis>
{
        new Axis{ Name = "Axis1"},
        new Axis{ Name = "Axis2"},
    };
    private List<Axis> AxisDirectionData = new List<Axis>
{
        new Axis{ Name = "ClockWise"},
        new Axis{ Name = "AntiClockWise"},
    };
    private void AxisChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        axisValue = (args.Value).ToString();
        if (axisValue == "Axis1")
        {
            axisDirectionValue = firstaAxisDirection == GaugeDirection.ClockWise ? "ClockWise" : "AntiClockWise";
            startAngleValue = FirstAxisStartangle;
            endAngleValue = FirstAxisEndangle;
        }
        else
        {
            axisDirectionValue = secondAxisDirection == GaugeDirection.ClockWise ? "ClockWise" : "AntiClockWise";
            startAngleValue = SecondAxisStartangle;
            endAngleValue = SecondAxisEndangle;
        }
    }
    private void AxisDirectionChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        axisDirectionValue = (args.Value).ToString();
        if (axisDirectionValue == "ClockWise")
        {
            if (axisValue == "Axis1") { firstaAxisDirection = GaugeDirection.ClockWise; }
            else { secondAxisDirection = GaugeDirection.ClockWise; }
        }
        else
        {
            if (axisValue == "Axis1") { firstaAxisDirection = GaugeDirection.AntiClockWise; }
            else { secondAxisDirection = GaugeDirection.AntiClockWise; }
        }
    }
    private void StartAngleChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        startAngleValue = Convert.ToDouble(args.Value);
        if (axisValue == "Axis1") { FirstAxisStartangle = startAngleValue; }
        else { SecondAxisStartangle = startAngleValue; }
    }
    private void EndAngleChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        endAngleValue = Convert.ToDouble(args.Value);
        if (axisValue == "Axis1") { FirstAxisEndangle = endAngleValue; }
        else { SecondAxisEndangle = endAngleValue; }
    }
}