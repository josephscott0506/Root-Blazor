@page "/circular-gauge/labels"

@using Syncfusion.Blazor.CircularGauge
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs

@inherits SampleBaseComponent;

<div class="col-lg-9 control-section sb-property-border">
    <SfCircularGauge>
        <CircularGaugeAxes>
            <CircularGaugeAxis StartAngle="210" EndAngle="150" Minimum="0" Maximum="170" Radius="75%" ShowLastLabel="@ShowLastLabel">
                <CircularGaugeAxisLabelStyle Position="@GaugeLabelPosition" AutoAngle="true" Offset="@GaugeLabelOffset">
                    <CircularGaugeAxisLabelFont Size="10px">
                    </CircularGaugeAxisLabelFont>
                </CircularGaugeAxisLabelStyle>
                <CircularGaugeAxisLineStyle Width="2" Color="#9E9E9E">
                </CircularGaugeAxisLineStyle>
                <CircularGaugeAxisMajorTicks Position="@GaugeMajorPosition" Color="#757575" Width="2" Offset="@GaugeMajorOffset" Height="@gaugeMajorHeight" Interval="20">
                </CircularGaugeAxisMajorTicks>
                <CircularGaugeAxisMinorTicks Position="@GaugeMinorPosition" Color="#757575" Width="2" Offset="@GaugeMinorOffset" Height="@gaugeMinorHeight" Interval="10">
                </CircularGaugeAxisMinorTicks>
                <CircularGaugePointers>
                    <CircularGaugePointer Type="PointerType.RangeBar" Value=145 Radius="60%" Color="#8BC34A" PointerWidth="7" RoundedCornerRadius="10">
                        <CircularGaugePointerAnimation Enable="false" Duration="0">
                        </CircularGaugePointerAnimation>
                    </CircularGaugePointer>
                </CircularGaugePointers>
                <CircularGaugeAnnotations>
                    <CircularGaugeAnnotation Angle="0" Radius="0%" ZIndex="1">
                        <ContentTemplate>
                            <div id='content' style='color:#518C03;font-size:20px;font-family:Segoe UI;font-weight:semibold;margin-left:-20px; margin-top:-20px'>145</div>
                        </ContentTemplate>
                    </CircularGaugeAnnotation>
                </CircularGaugeAnnotations>
            </CircularGaugeAxis>
        </CircularGaugeAxes>
    </SfCircularGauge>
</div>
<div class="col-md-3 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table style="width: 100%">
                <tr>
                    <td>
                        <div> Ticks </div>
                    </td>
                    <td>
                        <div>
                            <SfDropDownList DataSource="@TickData" Value="@tickValue">
                                <DropDownListEvents ValueChange="TickChange" TValue="string"></DropDownListEvents>
                                <DropDownListFieldSettings Text="Name" Value="Tickvalues"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                    </td>
                </tr>&nbsp;
                <tr>
                    <td>
                        <div> Tick Position </div>
                    </td>
                    <td>
                        <div>
                            <SfDropDownList DataSource="@TickPositionData" Value="@tickPositionValue">
                                <DropDownListEvents ValueChange="tickPositionChange" TValue="string"></DropDownListEvents>
                                <DropDownListFieldSettings Text="Name" Value="TickPositionValues"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                    </td>
                </tr>&nbsp;
                <tr>
                    <td>
                        <div> Label Position </div>
                    </td>
                    <td>
                        <div>
                            <SfDropDownList DataSource="@LabelPositionData" Value="@labelPositionValue">
                                <DropDownListEvents ValueChange="labelPositionChange" TValue="string"></DropDownListEvents>
                                <DropDownListFieldSettings Text="Name" Value="LabelPositionValues"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                    </td>
                </tr>&nbsp;
                <tr>
                    <td>
                        <div>Tick Offset <span>&nbsp;&nbsp;&nbsp;@tickOffsetText</span> </div>
                    </td>
                    <td>
                        <div>
                            <input type="range" value="@tickOffsetValue" min="0" max="50" @onchange="tickOffsetChange" />
                        </div>
                    </td>
                </tr>&nbsp;
                <tr>
                    <td>
                        <div>Tick Height <span>&nbsp;&nbsp;&nbsp;@tickHeightText</span> </div>
                    </td>
                    <td>
                        <div>
                            <input type="range" value="@tickHeightValue" min="1" max="50" @onchange="tickHeightChange" />
                        </div>
                    </td>
                </tr>&nbsp;
                <tr>
                    <td>
                        <div>Label Offset <span>&nbsp;&nbsp;&nbsp;@labelOffsetText</span> </div>
                    </td>
                    <td>
                        <div>
                            <input type="range" value="@labelOffsetValue" min="0" max="50" @onchange="labelOffsetChange" />
                        </div>
                    </td>
                </tr>&nbsp;
                <tr>
                    <td>
                        <div>Show Last Label </div>
                    </td>
                    <td>
                        <div>
                            <SfCheckBox ValueChange="lastLabelChange" Checked="@lastLabelChecked"></SfCheckBox>
                        </div>
                    </td>
                </tr>
            </table>
        </div>
    </div>
</div>

<style>
    td {
        width: 40%;
    }
</style>

@code {
    private Syncfusion.Blazor.CircularGauge.Position GaugeMinorLabelPosition = Syncfusion.Blazor.CircularGauge.Position.Outside;
    private Syncfusion.Blazor.CircularGauge.Position GaugeLabelPosition = Syncfusion.Blazor.CircularGauge.Position.Outside;
    private Syncfusion.Blazor.CircularGauge.Position GaugeMajorLabelPosition = Syncfusion.Blazor.CircularGauge.Position.Outside;
    private Syncfusion.Blazor.CircularGauge.Position GaugeMajorPosition = Syncfusion.Blazor.CircularGauge.Position.Inside;
    private Syncfusion.Blazor.CircularGauge.Position GaugeMinorPosition = Syncfusion.Blazor.CircularGauge.Position.Inside;
    private Syncfusion.Blazor.CircularGauge.Position TicksLabelPosition = Syncfusion.Blazor.CircularGauge.Position.Outside;
    private Syncfusion.Blazor.CircularGauge.Position TicksMajorPosition = Syncfusion.Blazor.CircularGauge.Position.Inside;
    private Syncfusion.Blazor.CircularGauge.Position TicksMinorPosition = Syncfusion.Blazor.CircularGauge.Position.Inside;

    private Boolean ShowLastLabel;
    private Double GaugeMajorOffset;
    private Double GaugeMinorOffset;
    private Double gaugeMajorHeight = 10;
    private Double gaugeMinorHeight = 5;
    private Double GaugeLabelOffset;
    private String tickValue = "major";
    private String labelPositionValue = "Outside";
    private String MajorlabelPositionValue = "Outside";
    private String MinorlabelPositionValue = "Outside";
    private String tickPositionValue = "Inside";
    private string gaugeMajortickPositionValue = "Inside";
    private string gaugeMinortickPositionValue = "Inside";
    private Double tickOffsetValue = 0;
    private Double tickHeightValue = 10;
    private Double labelOffsetValue = 0;
    private Boolean lastLabelChecked;
    private Double tickOffsetText = 0;
    private Double tickHeightText = 10;
    private Double labelOffsetText = 0;
    public Boolean IsMajorTick = true;

    public class LabelList
    {
        public string Tickvalues { get; set; }
        public string Name { get; set; }
    }

    private List<LabelList> TickData = new List<LabelList> {
        new LabelList{Tickvalues="major" , Name = "Major Ticks"},
        new LabelList{Tickvalues="minor", Name = "Minor Ticks"},
    };

    public class TickPositionList
    {
        public string TickPositionValues { get; set; }
        public string Name { get; set; }
    }
    private List<TickPositionList> TickPositionData = new List<TickPositionList> {
        new TickPositionList{TickPositionValues="Inside" , Name = "Inside"},
        new TickPositionList{TickPositionValues="Outside", Name = "Outside"},
        new TickPositionList{TickPositionValues="Cross", Name = "Cross"}
    };

    public class LabelPositionList
    {
        public string LabelPositionValues { get; set; }
        public string Name { get; set; }
    }
    private List<LabelPositionList> LabelPositionData = new List<LabelPositionList> {
        new LabelPositionList{LabelPositionValues="Inside" , Name = "Inside"},
        new LabelPositionList{LabelPositionValues="Outside", Name = "Outside"},
        new LabelPositionList{LabelPositionValues="Cross", Name = "Cross"}
    };

    private void TickChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        tickValue = args.Value.ToString();
        if (tickValue == "major")
        {
            IsMajorTick = true;
            tickOffsetValue = GaugeMajorOffset;
            tickHeightValue = gaugeMajorHeight;
            tickOffsetText = GaugeMajorOffset;
            tickHeightText = gaugeMajorHeight;
            tickPositionValue = gaugeMajortickPositionValue;
            GaugeLabelPosition = GaugeMajorLabelPosition;
            labelPositionValue = MajorlabelPositionValue;

            TicksMajorPosition = GaugeMajorPosition;
        }
        else
        {
            IsMajorTick = false;
            tickOffsetValue = GaugeMinorOffset;
            tickHeightValue = gaugeMinorHeight;
            tickOffsetText = GaugeMinorOffset;
            tickHeightText = gaugeMinorHeight;
            tickPositionValue = gaugeMinortickPositionValue;
            GaugeLabelPosition = GaugeMinorLabelPosition;
            labelPositionValue = MinorlabelPositionValue;

            TicksMinorPosition = GaugeMinorPosition;
        }
    }
    private void tickPositionChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        tickPositionValue = args.Value.ToString();
        if (IsMajorTick)
        {
            if (tickPositionValue == "Inside")
            {
                GaugeMajorPosition = Syncfusion.Blazor.CircularGauge.Position.Inside;
            }
            else if (tickPositionValue == "Outside")
            {
                GaugeMajorPosition = Syncfusion.Blazor.CircularGauge.Position.Outside;
            }
            else
            {
                GaugeMajorPosition = Syncfusion.Blazor.CircularGauge.Position.Cross;
            }
            TicksMajorPosition = GaugeMajorPosition;
            gaugeMajortickPositionValue = tickPositionValue;
        }
        else
        {
            // gaugeMinortickPositionValue = tickPositionValue;
            if (tickPositionValue == "Inside")
            {
                GaugeMinorPosition = Syncfusion.Blazor.CircularGauge.Position.Inside;
            }
            else if (tickPositionValue == "Outside")
            {
                GaugeMinorPosition = Syncfusion.Blazor.CircularGauge.Position.Outside;
            }
            else
            {
                GaugeMinorPosition = Syncfusion.Blazor.CircularGauge.Position.Cross;
            }
            TicksMinorPosition = GaugeMinorPosition;
            gaugeMinortickPositionValue = tickPositionValue;
        }
    }
    private void labelPositionChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        labelPositionValue = args.Value.ToString();
        if (IsMajorTick)
        {
            if (labelPositionValue == "Inside")
            {
                GaugeLabelPosition = Syncfusion.Blazor.CircularGauge.Position.Inside;
            }
            else if (labelPositionValue == "Outside")
            {
                GaugeLabelPosition = Syncfusion.Blazor.CircularGauge.Position.Outside;
            }
            else
            {
                GaugeLabelPosition = Syncfusion.Blazor.CircularGauge.Position.Cross;
            }
            GaugeMajorLabelPosition = GaugeLabelPosition;
            MajorlabelPositionValue = labelPositionValue;
        }
        else
        {
            if (labelPositionValue == "Inside")
            {
                GaugeLabelPosition = Syncfusion.Blazor.CircularGauge.Position.Inside;
            }
            else if (labelPositionValue == "Outside")
            {
                GaugeLabelPosition = Syncfusion.Blazor.CircularGauge.Position.Outside;
            }
            else
            {
                GaugeLabelPosition = Syncfusion.Blazor.CircularGauge.Position.Cross;
            }
            GaugeMinorLabelPosition = GaugeLabelPosition;
            MinorlabelPositionValue = labelPositionValue;
        }
    }
    private void tickOffsetChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        tickOffsetValue = Convert.ToDouble(args.Value);
        if (IsMajorTick) { GaugeMajorOffset = tickOffsetValue; }
        else { GaugeMinorOffset = tickOffsetValue; }
        tickOffsetText = tickOffsetValue;
    }
    private void tickHeightChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        tickHeightValue = Convert.ToDouble(args.Value);
        if (IsMajorTick) { gaugeMajorHeight = tickHeightValue; }
        else { gaugeMinorHeight = tickHeightValue; }
        tickHeightText = tickHeightValue;
    }
    private void labelOffsetChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        labelOffsetValue = Convert.ToDouble(args.Value);
        GaugeLabelOffset = labelOffsetValue;
        labelOffsetText = labelOffsetValue;
    }
    private void lastLabelChange(Syncfusion.Blazor.Buttons.ChangeEventArgs args)
    {
        lastLabelChecked = args.Checked;
        ShowLastLabel = args.Checked;
    }
}