@page "/circular-gauge/data-sample"

@using Syncfusion.Blazor.CircularGauge
@using Syncfusion.Blazor.Grids

@inherits SampleBaseComponent;


<div class="control-section">
    <div class="row">
        <div class="col-sm-12">
            <div class="row">
                <div class="col-sm-4">
                    <SfCircularGauge Height="250px" @ref="@GermanRef">
                        <CircularGaugeAxes>
                            <CircularGaugeAxis StartAngle="230" EndAngle="130">
                                <CircularGaugeAxisLineStyle Width="0" Color="transparent">
                                </CircularGaugeAxisLineStyle>
                                <CircularGaugeAxisLabelStyle Position="Position.Outside">
                                    <CircularGaugeAxisLabelFont Size="0px" Color="transparent"></CircularGaugeAxisLabelFont>
                                </CircularGaugeAxisLabelStyle>
                                <CircularGaugeAxisMajorTicks Width="0" Height="0.01">
                                </CircularGaugeAxisMajorTicks>
                                <CircularGaugeAxisMinorTicks Width="0" Height="0.01">
                                </CircularGaugeAxisMinorTicks>
                                <CircularGaugeRanges>
                                    <CircularGaugeRange Start="0" End="50" StartWidth="15" EndWidth="15" Color="#EC121C"></CircularGaugeRange>
                                    <CircularGaugeRange Start="50" End="100" StartWidth="15" EndWidth="15" Color="#45EA0C"></CircularGaugeRange>
                                </CircularGaugeRanges>
                                <CircularGaugePointers>
                                    <CircularGaugePointer Value="@GermanPointerValue" Radius="60%" Color="#777777" PointerWidth="5">
                                        <CircularGaugePointerAnimation Enable="false" Duration="900"></CircularGaugePointerAnimation>
                                        <CircularGaugeCap Radius="6" Color="#777777">
                                            <CircularGaugeCapBorder Width="0">
                                            </CircularGaugeCapBorder>
                                        </CircularGaugeCap>
                                        <CircularGaugeNeedleTail Length="25%" Color="#777777">
                                        </CircularGaugeNeedleTail>
                                    </CircularGaugePointer>
                                </CircularGaugePointers>
                                <CircularGaugeAnnotations>
                                    <CircularGaugeAnnotation Angle="180" ZIndex="1" Radius="30%">
                                        <ContentTemplate>
                                            <div id='templateWrap'>
                                                <img src="styles/images/circulargauge/positive.png" />
                                                <div class='des'>
                                                    <div style="color:#424242;font-size:20px;font-family:Roboto">@GermanAnnotationText</div>
                                                </div>
                                            </div>
                                        </ContentTemplate>
                                    </CircularGaugeAnnotation>
                                    <CircularGaugeAnnotation Angle="180" ZIndex="1" Radius="65%" Content="Germany">
                                        <ContentTemplate>
                                            <div style="color:#9E9E9E;font-size:16px;font-style:Roboto;margin-left:-30px;">Germany</div>
                                        </ContentTemplate>
                                    </CircularGaugeAnnotation>
                                </CircularGaugeAnnotations>
                            </CircularGaugeAxis>
                        </CircularGaugeAxes>
                    </SfCircularGauge>
                </div>
                <div class="col-sm-4">
                    <SfCircularGauge Height="250px" @ref="@USARef">
                        <CircularGaugeAxes>
                            <CircularGaugeAxis StartAngle="230" EndAngle="130">
                                <CircularGaugeAxisLineStyle Width="0" Color="transparent">
                                </CircularGaugeAxisLineStyle>
                                <CircularGaugeAxisLabelStyle Position="Position.Outside">
                                    <CircularGaugeAxisLabelFont Size="0px" Color="transparent"></CircularGaugeAxisLabelFont>
                                </CircularGaugeAxisLabelStyle>
                                <CircularGaugeAxisMajorTicks Width="0" Height="0.01">
                                </CircularGaugeAxisMajorTicks>
                                <CircularGaugeAxisMinorTicks Width="0" Height="0.01">
                                </CircularGaugeAxisMinorTicks>
                                <CircularGaugeRanges>
                                    <CircularGaugeRange Start="0" End="50" StartWidth="15" EndWidth="15" Color="#EC121C"></CircularGaugeRange>
                                    <CircularGaugeRange Start="50" End="100" StartWidth="15" EndWidth="15" Color="#45EA0C"></CircularGaugeRange>
                                </CircularGaugeRanges>
                                <CircularGaugePointers>
                                    <CircularGaugePointer Value="@UsaPointerValue" Radius="60%" Color="#777777" PointerWidth="5">
                                        <CircularGaugePointerAnimation Enable="false" Duration="900"></CircularGaugePointerAnimation>
                                        <CircularGaugeCap Radius="6" Color="#777777">
                                            <CircularGaugeCapBorder Width="0">
                                            </CircularGaugeCapBorder>
                                        </CircularGaugeCap>
                                        <CircularGaugeNeedleTail Length="25%" Color="#777777">
                                        </CircularGaugeNeedleTail>
                                    </CircularGaugePointer>
                                </CircularGaugePointers>
                                <CircularGaugeAnnotations>
                                    <CircularGaugeAnnotation Angle="180" ZIndex="1" Radius="30%">
                                        <ContentTemplate>
                                            <div id='templateWrap'>
                                                <img src="styles/images/circulargauge/positive.png" />
                                                <div class='des'>
                                                    <div style="color:#424242;font-size:20px;font-family:Roboto">@USAAnnotationText</div>
                                                </div>
                                            </div>
                                        </ContentTemplate>
                                    </CircularGaugeAnnotation>
                                    <CircularGaugeAnnotation Angle="180" ZIndex="1" Radius="65%" Content="USA">
                                        <ContentTemplate>
                                            <div style="color:#9E9E9E;font-size:16px;font-style:Roboto;margin-left:-10px;">USA</div>
                                        </ContentTemplate>
                                    </CircularGaugeAnnotation>
                                </CircularGaugeAnnotations>
                            </CircularGaugeAxis>
                        </CircularGaugeAxes>
                    </SfCircularGauge>
                </div>
                <div class="col-sm-4">
                    <SfCircularGauge Height="250px" @ref="@UKRef">
                        <CircularGaugeAxes>
                            <CircularGaugeAxis StartAngle="230" EndAngle="130">
                                <CircularGaugeAxisLineStyle Width="0" Color="transparent">
                                </CircularGaugeAxisLineStyle>
                                <CircularGaugeAxisLabelStyle Position="Position.Outside">
                                    <CircularGaugeAxisLabelFont Size="0px" Color="transparent"></CircularGaugeAxisLabelFont>
                                </CircularGaugeAxisLabelStyle>
                                <CircularGaugeAxisMajorTicks Width="0" Height="0.01">
                                </CircularGaugeAxisMajorTicks>
                                <CircularGaugeAxisMinorTicks Width="0" Height="0.01">
                                </CircularGaugeAxisMinorTicks>
                                <CircularGaugeRanges>
                                    <CircularGaugeRange Start="0" End="50" StartWidth="15" EndWidth="15" Color="#EC121C"></CircularGaugeRange>
                                    <CircularGaugeRange Start="50" End="100" StartWidth="15" EndWidth="15" Color="#45EA0C"></CircularGaugeRange>
                                </CircularGaugeRanges>
                                <CircularGaugePointers>
                                    <CircularGaugePointer Value="@UkPointerValue" Radius="60%" Color="#777777" PointerWidth="5">
                                        <CircularGaugePointerAnimation Enable="false" Duration="900"></CircularGaugePointerAnimation>
                                        <CircularGaugeCap Radius="6" Color="#777777">
                                            <CircularGaugeCapBorder Width="0">
                                            </CircularGaugeCapBorder>
                                        </CircularGaugeCap>
                                        <CircularGaugeNeedleTail Length="25%" Color="#777777">
                                        </CircularGaugeNeedleTail>
                                    </CircularGaugePointer>
                                </CircularGaugePointers>
                                <CircularGaugeAnnotations>
                                    <CircularGaugeAnnotation Angle="180" ZIndex="1" Radius="30%">
                                        <ContentTemplate>
                                            <div id='templateWrap'>
                                                <img src="styles/images/circulargauge/negative.png" />
                                                <div class='des'>
                                                    <div style="color:#424242;font-size:20px;font-family:Roboto">@UKAnnotationText</div>
                                                </div>
                                            </div>
                                        </ContentTemplate>
                                    </CircularGaugeAnnotation>
                                    <CircularGaugeAnnotation Angle="180" ZIndex="1" Radius="65%" Content="UK">
                                        <ContentTemplate>
                                            <div style="color:#9E9E9E;font-size:16px;font-style:Roboto;margin-left:0px;">UK</div>
                                        </ContentTemplate>
                                    </CircularGaugeAnnotation>
                                </CircularGaugeAnnotations>
                            </CircularGaugeAxis>
                        </CircularGaugeAxes>
                    </SfCircularGauge>
                </div>
            </div>
            <div class="col-sm-12">
                <div class="row">
                    <div class="col-sm-12">
                        <SfGrid DataSource="@gridData" AllowSelection="false" @ref="@Grid"
                                 EnableHover="true">
                            <GridColumns>
                                <GridColumn Field="Country" HeaderText="Country" TextAlign="TextAlign.Left"></GridColumn>
                                <GridColumn Field="Sales" HeaderText="Sales $" TextAlign="TextAlign.Left"></GridColumn>
                                <GridColumn Field="Target" HeaderText="Target $" TextAlign="TextAlign.Left"></GridColumn>
                                <GridColumn Field="vsTarget" HeaderText="vs Target" TextAlign="TextAlign.Left"></GridColumn>
                            </GridColumns>
                        </SfGrid>
                    </div>
                </div>
            </div>
        </div>
        <style>

            #templateWrap img {
                width: 16px;
                height: 16px;
                margin-top: 4px;
                margin-left: -25px
            }

            #templateWrap .des {
                float: right;
            }
        </style>

    </div>
</div>
@code{
    SfGrid<GaugeGridData> Grid { get; set; }
    SfCircularGauge GermanRef;
    SfCircularGauge USARef;
    SfCircularGauge UKRef;
    private double GermanPointerValue = 75;
    private double UsaPointerValue = 60;
    private double UkPointerValue = 25;
    private String GermanAnnotationText = "75%";
    private String USAAnnotationText = "60%";
    private String UKAnnotationText = "25%";
    public String GermanGridTarget;
    public String UsaGridTarget;
    public String UkGridTarget;
    Random Random = new Random();
    public double value1;
    public double value2;
    public double value3;
    public String grid1;
    public String grid2;
    public String grid3;
    public class GaugeGridData
    {
        public String Country { get; set; }
        public double Sales { get; set; }
        public double Target { get; set; }
        public String vsTarget { get; set; }
    }
    private List<GaugeGridData> gridData { get; set; } = new List<GaugeGridData>();
    System.Timers.Timer syncTimer1 = null;
    protected override void OnInitialized()
    {
        syncTimer1 = new System.Timers.Timer(2000);
        syncTimer1.Elapsed += this.pointerValueUpdate;
        syncTimer1.AutoReset = true;
        syncTimer1.Enabled = true;
        List<GaugeGridData> gaugeData = new List<GaugeGridData>
{
            new GaugeGridData { Country = "Germany" , Sales = 500 , Target = 400 ,vsTarget = "300"},
            new GaugeGridData { Country = "USA" , Sales = 1000 , Target = 600 ,vsTarget = "360"},
            new GaugeGridData { Country = "UK" , Sales = 600 , Target = 700 ,vsTarget = "-100"},
        };
        this.gridData = gaugeData;
    }
    void pointerValueUpdate(Object source, System.Timers.ElapsedEventArgs e)
    {
        var Number = Random.NextDouble();
        GermanPointerValue = ((Number * 35) + 55);
        UsaPointerValue = ((Number * 15) + 60);
        UkPointerValue = ((Number * 30) + 10);
        value1 = Math.Round((Number * (90 - 55) + 55));
        value2 = Math.Round((Number * (75 - 60) + 60));
        value3 = Math.Round((Number * (40 - 10) + 10));
        grid1 = (4 * value1).ToString();
        grid2 = (6 * value2).ToString();
        grid3 = (-(7 * value3)).ToString();
        GermanGridTarget = (4 * GermanPointerValue).ToString("N0");
        UsaGridTarget = (6 * UsaPointerValue).ToString("N0");
        UkGridTarget = (-(7 * UkPointerValue)).ToString("N0");
        GermanAnnotationText = GermanPointerValue.ToString("N0") + "%";
        USAAnnotationText = UsaPointerValue.ToString("N0") + "%";
        UKAnnotationText = "-" + UkPointerValue.ToString("N0") + "%";
        this.Grid.DataSource = new List<GaugeGridData>
{
            new GaugeGridData { Country = "Germany" , Sales = 500 , Target = 400 ,vsTarget = grid1},
            new GaugeGridData { Country = "USA" , Sales = 1000 , Target = 600 ,vsTarget = grid2},
            new GaugeGridData { Country = "UK" , Sales = 600 , Target = 700 ,vsTarget =  grid3},
            };
        InvokeAsync(() =>
        {
            GermanRef.Refresh();
            USARef.Refresh();
            UKRef.Refresh();
            Grid.Refresh();
        });
        GermanRef.SetPointerValue(0, 0, GermanPointerValue);
        USARef.SetPointerValue(0, 0, UsaPointerValue);
        UKRef.SetPointerValue(0, 0, UkPointerValue);
    }
}