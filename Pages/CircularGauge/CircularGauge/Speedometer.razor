@page "/circular-gauge/speedometer"

@using Syncfusion.Blazor.CircularGauge
@using Syncfusion.Blazor.Buttons

@inherits SampleBaseComponent;

<div class="col-lg-9 control-section sb-property-border">
    <SfCircularGauge Title="Speedometer" CenterY="75%" @ref="@Gauge">
        <CircularGaugeTitleStyle Size="18px"></CircularGaugeTitleStyle>
        <CircularGaugeAxes>
            <CircularGaugeAxis EndAngle="90" StartAngle="270" Radius="120%" Minimum="0" Maximum="120" RangeGap="@RangeGap">
                <CircularGaugeAxisLineStyle Width="0" Color="#9E9E9E">
                </CircularGaugeAxisLineStyle>
                <CircularGaugeAxisMajorTicks Width="0">
                </CircularGaugeAxisMajorTicks>
                <CircularGaugeAxisMinorTicks Width="0">
                </CircularGaugeAxisMinorTicks>
                <CircularGaugeAxisLabelStyle Position="Position.Outside" AutoAngle="true">
                    <CircularGaugeAxisLabelFont Size="13px" FontFamily="Roboto"></CircularGaugeAxisLabelFont>
                </CircularGaugeAxisLabelStyle>
                <CircularGaugeRanges>
                    <CircularGaugeRange Start="@FirstRangeStart" End="@FirstRangeEnd" StartWidth="@FirstRangeStartWidth" EndWidth="@FirstRangeEndWidth" Radius="102%" Color="@FirstRangeColor">
                    </CircularGaugeRange>
                    <CircularGaugeRange Start="@SecondRangeStart" End="@SecondRangeEnd" StartWidth="@SecondRangeStartWidth" EndWidth="@SecondRangeEndWidth" Radius="102%" Color="@SecondRangeColor">
                    </CircularGaugeRange>
                    <CircularGaugeRange Start="@ThirdRangeStart" End="@ThirdRangeEnd" StartWidth="@ThirdRangeStartWidth" EndWidth="@ThirdRangeEndWidth" Radius="102%" Color="@ThirdRangeColor">
                    </CircularGaugeRange>
                    <CircularGaugeRange Start="@FourthRangeStart" End="@FourthRangeEnd" StartWidth="@FourthRangeStartWidth" EndWidth="@FourthRangeEndWidth" Radius="102%" Color="@FourthRangeColor">
                    </CircularGaugeRange>
                    <CircularGaugeRange Start="@FifthRangeStart" End="@FifthRangeEnd" StartWidth="@FifthRangeStartWidth" EndWidth="@FifthRangeEndWidth" Radius="102%" Color="@FifthRangeColor">
                    </CircularGaugeRange>
                    <CircularGaugeRange Start="@SixRangeStart" End="@SixRangeEnd" StartWidth="@SixRangeStartWidth" EndWidth="@SixRangeEndWidth" Radius="102%" Color="@SixRangeColor">
                    </CircularGaugeRange>
                </CircularGaugeRanges>
                <CircularGaugePointers>
                    <CircularGaugePointer Value="@PointerValue" Radius="80%" Color="#757575" PointerWidth="7">
                        <CircularGaugePointerAnimation Enable="false" Duration="1000">
                        </CircularGaugePointerAnimation>
                        <CircularGaugeCap Radius="8" Color="#757575">
                            <CircularGaugeCapBorder Width="0">
                            </CircularGaugeCapBorder>
                        </CircularGaugeCap>
                        <CircularGaugeNeedleTail Length="15%" Color="#757575">
                        </CircularGaugeNeedleTail>
                    </CircularGaugePointer>
                </CircularGaugePointers>
                <CircularGaugeAnnotations>
                    <CircularGaugeAnnotation Angle="0" Radius='30%' ZIndex='1' Content="40 km/h">
                        <CircularGaugeAnnotationTextStyle Size="20px" FontFamily="Roboto"></CircularGaugeAnnotationTextStyle>
                    </CircularGaugeAnnotation>
                </CircularGaugeAnnotations>
            </CircularGaugeAxis>
        </CircularGaugeAxes>
    </SfCircularGauge>
</div>
<div class="col-lg-3 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table style="width: 100%" class="property-panel-table">
                <tbody>
                    <tr>
                        <td style="width: 40%">
                            <div> Combine ranges</div>
                        </td>
                        <td style="width: 40%">
                            <div style="margin-top:-5px;">
                                <SfCheckBox ValueChange="@CombineRangeChange" Checked="@combineRangeChecked"></SfCheckBox>
                            </div>
                        </td>
                    </tr>
                    <tr style="height:50px;">
                        <td style="width: 40%">
                            <div> Gap between ranges</div>
                        </td>
                        <td style="width: 40%">
                            <div style="margin-top:-5px;">
                                <SfCheckBox Disabled="@gapDisable" ValueChange="@RangeGapChange" Checked="@rangeGapChecked"></SfCheckBox>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>
<svg style="height:0px;width:0px">
    <defs>
        <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="0%">
            <stop offset="0%" style="stop-color:#82b944;stop-opacity:1" />
            <stop offset="50%" style="stop-color:rgb(255,255,0);stop-opacity:1" />
            <stop offset="100%" style="stop-color:red;stop-opacity:1" />
        </linearGradient>
    </defs>
</svg>
<style>
    .property-panel-table div {
        padding-left: 10px;
        padding-top: 10px;
    }
</style>

@code {
    SfCircularGauge Gauge;
    private Double RangeGap = 0;
    private Double PointerValue = 40;
    private Double FirstRangeStart = 0;
    private Double FirstRangeEnd = 20;
    private String FirstRangeStartWidth = "5";
    private String FirstRangeEndWidth = "10";
    private String FirstRangeColor = "#82b944";
    private Double SecondRangeStart = 20;
    private Double SecondRangeEnd = 40;
    private String SecondRangeStartWidth = "10";
    private String SecondRangeEndWidth = "15";
    private String SecondRangeColor = "#a1cb43";
    private Double ThirdRangeStart = 40;
    private Double ThirdRangeEnd = 60;
    private String ThirdRangeStartWidth = "15";
    private String ThirdRangeEndWidth = "20";
    private String ThirdRangeColor = "#ddec12";
    private Double FourthRangeStart = 60;
    private Double FourthRangeEnd = 80;
    private String FourthRangeStartWidth = "20";
    private String FourthRangeEndWidth = "25";
    private String FourthRangeColor = "#ffbc00";
    private Double FifthRangeStart = 80;
    private Double FifthRangeEnd = 100;
    private String FifthRangeStartWidth = "25";
    private String FifthRangeEndWidth = "30";
    private String FifthRangeColor = "#ff6000";
    private Double SixRangeStart = 100;
    private Double SixRangeEnd = 120;
    private String SixRangeStartWidth = "30";
    private String SixRangeEndWidth = "35";
    private String SixRangeColor = "red";
    private String PointerValueText = "40 km/h";
    private Boolean combineRangeChecked;
    private Boolean rangeGapChecked;
    private Boolean gapDisable = false;
    System.Timers.Timer syncTimer1 = null;
    public string[] Values = {"N", "NE", "E", "SE", "S", "SW", "W" };

    protected override void OnInitialized()
    {
        syncTimer1 = new System.Timers.Timer(1000);
        syncTimer1.Elapsed += this.PointerValueUpdate;
        syncTimer1.AutoReset = true;
        syncTimer1.Enabled = true;
    }
    Random Random = new Random();
    void PointerValueUpdate(Object source, System.Timers.ElapsedEventArgs e)
    {
        var Number = Random.NextDouble();
        var value = PointerValue + ((Number * (10 - (-10))) - 10);
        PointerValue = Math.Abs(value);
        Gauge.SetPointerValue(0, 0, PointerValue);
        PointerValueText = (Math.Round(PointerValue)).ToString() + "km/h";
        Gauge.SetAnnotationValue(0, 0, PointerValueText);
    }
    private void CombineRangeChange(Syncfusion.Blazor.Buttons.ChangeEventArgs args)
    {
        combineRangeChecked = args.Checked;
        if (combineRangeChecked)
        {
            FirstRangeStart = 0;
            FirstRangeEnd = 120;
            FirstRangeStartWidth = "5";
            FirstRangeEndWidth = "35";
            FirstRangeColor = "url(#grad1)";
            SecondRangeStart = 0;
            SecondRangeEnd = 0;
            SecondRangeStartWidth = "";
            SecondRangeEndWidth = "";
            SecondRangeColor = "";
            ThirdRangeStart = 0;
            ThirdRangeEnd = 0;
            ThirdRangeStartWidth = "";
            ThirdRangeEndWidth = "";
            ThirdRangeColor = "";
            FourthRangeStart = 0;
            FourthRangeEnd = 0;
            FourthRangeStartWidth = "";
            FourthRangeEndWidth = "";
            FourthRangeColor = "";
            FifthRangeStart = 0;
            FifthRangeEnd = 0;
            FifthRangeStartWidth = "";
            FifthRangeEndWidth = "";
            FifthRangeColor = "";
            SixRangeStart = 0;
            SixRangeEnd = 0;
            SixRangeStartWidth = "";
            SixRangeEndWidth = "";
            SixRangeColor = "";
        }
        else
        {
            FirstRangeStart = 0;
            FirstRangeEnd = 20;
            FirstRangeStartWidth = "5";
            FirstRangeEndWidth = "10";
            FirstRangeColor = "#82b944";
            SecondRangeStart = 20;
            SecondRangeEnd = 40;
            SecondRangeStartWidth = "10";
            SecondRangeEndWidth = "15";
            SecondRangeColor = "#a1cb43";
            ThirdRangeStart = 40;
            ThirdRangeEnd = 60;
            ThirdRangeStartWidth = "15";
            ThirdRangeEndWidth = "20";
            ThirdRangeColor = "#ddec12";
            FourthRangeStart = 60;
            FourthRangeEnd = 80;
            FourthRangeStartWidth = "20";
            FourthRangeEndWidth = "25";
            FourthRangeColor = "#ffbc00";
            FifthRangeStart = 80;
            FifthRangeEnd = 100;
            FifthRangeStartWidth = "25";
            FifthRangeEndWidth = "30";
            FifthRangeColor = "#ff6000";
            SixRangeStart = 100;
            SixRangeEnd = 120;
            SixRangeStartWidth = "30";
            SixRangeEndWidth = "35";
            SixRangeColor = "red";
        }
        gapDisable = args.Checked;
    }
    private void RangeGapChange(Syncfusion.Blazor.Buttons.ChangeEventArgs args)
    {
        rangeGapChecked = args.Checked;
        RangeGap = (rangeGapChecked) ? 5 : 0;
    }
}