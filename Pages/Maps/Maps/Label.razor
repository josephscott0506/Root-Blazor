@page "/maps/label"

@using Syncfusion.Blazor.Maps
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons

@inherits SampleBaseComponent;

<div class="col-lg-9 control-section sb-property-border">
    <div class="control-section">
        <SfMaps>
            <MapsZoomSettings Enable="false"></MapsZoomSettings>
            <MapsLayers>
                <MapsLayer ShapeData="@USA">
                    <MapsDataLabelSettings Visible="@DatalabelVisible" LabelPath="name" SmartLabelMode="@DatalabelSmartLabelMode" IntersectionAction="@DatalabelInterSectAction"></MapsDataLabelSettings>
                    <MapsShapeSettings Autofill="true"></MapsShapeSettings>
                    <MapsLayerTooltipSettings Visible="true" ValuePath="name"></MapsLayerTooltipSettings>
                </MapsLayer>
            </MapsLayers>
        </SfMaps>
    </div>
</div>
<div class="col-lg-3 property-section">
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br>
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table style="width:100%" title="Properties">
                <tbody>
                    <tr style="height: 35px">
                        <td style="width: 70%" class="property-text">
                            Show Labels
                        </td>
                        <td style="width: 50%">
                            <SfCheckBox Checked="@CheckBoxvalue" ValueChange="Showlabel"></SfCheckBox>
                        </td>
                    </tr>
                    <tr style="height: 35px">
                        <td style="width: 70%" class="property-text">
                            Smart label mode
                        </td>
                        <td style="width: 50%">
                            <SfDropDownList Placeholder="Select smartlabel mode" DataSource="@SmartLabelModeData" Value="@SmartLabelModeValue" Width="120px">
                                <DropDownListEvents TValue="string" ValueChange="SmartLabelValueChange"></DropDownListEvents>
                                <DropDownListFieldSettings text="Name" value="Value"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </td>
                    </tr>
                    <tr style="height: 35px">
                        <td style="width: 70%" class="property-text">
                            Intersect action
                        </td>
                        <td style="width: 50%">
                            <SfDropDownList Placeholder="Select intersect action" DataSource="@IntersectactionData" Value="@IntersectActionDataValue" Width="120px">
                                <DropDownListEvents TValue="string" ValueChange="IntersectActionValueChange"></DropDownListEvents>
                                <DropDownListFieldSettings Text="Name" value="Value"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    public bool DatalabelVisible = true;
    public bool CheckBoxvalue = true;
    public SmartLabelMode DatalabelSmartLabelMode = SmartLabelMode.Trim;
    public IntersectAction DatalabelInterSectAction = IntersectAction.None;
    public string SmartLabelModeValue = "Trim";
    public string IntersectActionDataValue = "None";
    public class IntersectValues
    {
        public string Value { get; set; }
        public string Name { get; set; }
    };
    public List<IntersectValues> IntersectactionData = new List<IntersectValues> {
        new IntersectValues { Value="None", Name="None" },
        new IntersectValues { Value="Trim", Name="Trim" },
        new IntersectValues { Value="Hide", Name="Hide" }
    };
    public class SmartValues
    {
        public string Value { get; set; }
        public string Name { get; set; }
    };
    public List<SmartValues> SmartLabelModeData = new List<SmartValues> {
        new SmartValues { Value="Trim", Name="Trim" },
        new SmartValues { Value="None", Name="None" },
        new SmartValues { Value="Hide", Name="Hide" }
    };
    public class MapDataSettings
    {
        public Boolean async { get; set; }
        public String dataOptions { get; set; }
        public String type { get; set; }
    }
    public MapDataSettings USA = new MapDataSettings
    {
        async = true,
        dataOptions = "scripts/MapsData/usa.json",
        type = "GET"
    };
    public void Showlabel(Syncfusion.Blazor.Buttons.ChangeEventArgs args)
    {
        CheckBoxvalue = args.Checked;
        DatalabelVisible = args.Checked;
    }
    public void SmartLabelValueChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        SmartLabelModeValue = args.Value;
        if (args.Value == "None")
        {
            DatalabelSmartLabelMode = SmartLabelMode.None;
        }
        else if (args.Value == "Hide")
        {
            DatalabelSmartLabelMode = SmartLabelMode.Hide;
        }
        else
        {
            DatalabelSmartLabelMode = SmartLabelMode.Trim;
        }
    }
    public void IntersectActionValueChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        IntersectActionDataValue = args.Value;
        if (args.Value == "Trim")
        {
            DatalabelInterSectAction = IntersectAction.Trim;
        }
        else if (args.Value == "Hide")
        {
            DatalabelInterSectAction = IntersectAction.Hide;
        }
        else
        {
            DatalabelInterSectAction = IntersectAction.None;
        }
    }
}