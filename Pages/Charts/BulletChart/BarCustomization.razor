@page "/bullet-chart/bar-customization"
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@inject NavigationManager NavigationManager

@inherits SampleBaseComponent;
<div class="row">
    <div class="control-section col-md-8">
        <SfBulletChart DataSource="@BulletChartData" Type="@Type" ValueField="ActualValue" TargetField="Targetvalue" Minimum="0" Maximum="300" Interval="50"
                        ValueFill="@ValueFillColor" TargetColor="@TargetFillColor" Title="New Customers" Subtitle="in Thousands" TitlePosition="TextPosition.Left">
            <BulletChartAnimation Enable="false"></BulletChartAnimation>
            <BulletChartTooltip Enable="true"></BulletChartTooltip>
            <BulletChartRangeCollection>
                <BulletChartRange End="150"> </BulletChartRange>
                <BulletChartRange End="250"></BulletChartRange>
                <BulletChartRange End="300"></BulletChartRange>
            </BulletChartRangeCollection>
            <BulletChartEvents Load="BeforeRender" />
        </SfBulletChart>
    </div>
    <div class="col-md-4 property-section">
        <table style="width: 100%">
            <tr style="height:50px"><th>Properties</th></tr>
            <tr style="height: 50px">
                <td style="width: 60%">
                    <div>Actual Value:</div>
                </td>
                <td style="width: 40%;">
                    <div>
                        <SfSlider Value="270" Min="0" Max="300" Step="10">
                            <SliderTooltipData IsVisible="true"></SliderTooltipData>
                            <SliderEvents TValue="double" OnChange="ChangeActualValue"></SliderEvents>
                        </SfSlider>
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td style="width: 60%">
                    <div>Target Value:</div>
                </td>
                <td style="width: 40%;">
                    <div>
                        <SfSlider Value="250" Min="0" Max="300" Step="10">
                            <SliderTooltipData IsVisible="true"></SliderTooltipData>
                            <SliderEvents TValue="double" OnChange="ChangeTagetValue"></SliderEvents>
                        </SfSlider>
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td style="width: 60%">
                    Feature Bar Type:
                </td>
                <td style="width: 40%;">
                    <SfDropDownList TValue="string" Placeholder="Rect" TItem="Data" DataSource="@DropDowmData" @bind-Value="@Value">
                        <DropDownListFieldSettings Value="ID"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="string" ValueChange="ChangeType"></DropDownListEvents>
                    </SfDropDownList>
                </td>
            </tr>
            <tr style="height: 50px">
                <td style="width: 60%">
                    <div>Feature Bar Color:</div>
                </td>
                <td style="width: 40%;">
                    <div>
                        <SfColorPicker Value="#000000" Mode="ColorPickerMode.Palette" ValueChange="FeatureBarColor"></SfColorPicker>
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td style="width: 60%">
                    <div>Target Color:</div>
                </td>
                <td style="width: 40%;">
                    <div>
                        <SfColorPicker Value="#000000" Mode="ColorPickerMode.Palette" ValueChange="TargetColor"></SfColorPicker>
                    </div>
                </td>
            </tr>
        </table>
    </div>
</div>

@code{

    FeatureType Type;

    public string ValueFillColor = "#000000", TargetFillColor = "#000000";
    public GetCurrentValue ColorValue { get; set; }

    string Value = "Rect";
    public class GetCurrentValue
    {
        public string hex { get; set; }
        public string rgba { get; set; }
    }

    public void FeatureBarColor(ColorPickerEventArgs args)
    {
        this.ColorValue = ((JObject)args.CurrentValue).ToObject<GetCurrentValue>();
        this.ValueFillColor = this.ColorValue.hex;
    }

    public void TargetColor(ColorPickerEventArgs args)
    {
        this.ColorValue = ((JObject)args.CurrentValue).ToObject<GetCurrentValue>();
        this.TargetFillColor = this.ColorValue.hex;
    }


    public void ChangeActualValue(SliderChangeEventArgs<double> args)
    {

        BulletChartData = new List<ChartData>
            {
                    new ChartData { ActualValue = args.Value, Targetvalue = this.BulletChartData[0].Targetvalue }
                };
    }

    public void ChangeTagetValue(SliderChangeEventArgs<double> args)
    {

        BulletChartData = new List<ChartData>
            {
                    new ChartData { ActualValue = this.BulletChartData[0].ActualValue, Targetvalue = args.Value }
                };
    }

    public class Data
    {
        public string ID { get; set; }
    }

    private List<Data> DropDowmData = new List<Data>()
        {
                new Data(){ ID= "Rect"},
                new Data(){ ID= "Dot"}
            };

    private void ChangeType(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        this.Type = (FeatureType)Enum.Parse(typeof(FeatureType), args.Value, true);
        StateHasChanged();
    }

    public class ChartData
    {
        public double ActualValue { get; set; }
        public double Targetvalue { get; set; }
    }
    public List<ChartData> BulletChartData = new List<ChartData>
{
            new ChartData { ActualValue = 270, Targetvalue = 250 }
        };

    string CurrentUri;
    void BeforeRender(IBulletLoadedEventArgs Args)
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Args.Theme = ChartTheme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Args.Theme = ChartTheme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Args.Theme = ChartTheme.HighContrast;
        }
        else
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
    }
}
