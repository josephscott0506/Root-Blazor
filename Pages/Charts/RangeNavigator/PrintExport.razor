@page "/range-selector/print-export"
@using Syncfusion.Blazor.Charts
@using Newtonsoft.Json
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;
@if (ExportData == null)
{
    <div class="stockchartloader"></div>
}
else
{
<div class="row">
    <div class="col-lg-9 control-section" align="center">
        <h4 align="center" style="font-family: Segoe UI;font-weight: 500; font-style:normal; font-size:15px;"> Mobile Sales Trends - 2017</h4>
        <div>
            <SfRangeNavigator  @ref="RangeObj" Value="@Value" LabelFormat="MMM" EnableGrouping="true" IntervalType="RangeIntervalType.Months"
                               DataSource="@ExportData" XName="xDate" YName="Close" ValueType="Syncfusion.Blazor.Charts.RangeValueType.DateTime">
                <RangeNavigatorEvents Load="BeforeRender" Changed="OnRangeChanged"></RangeNavigatorEvents>
            </SfRangeNavigator>
        </div> <br>
        <div>
            <SfChart @ref="ChartObj">
                <ChartEvents Load="ChartLoad" />
                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" EdgeLabelPlacement="EdgeLabelPlacement.Shift" ZoomFactor="@ZF" ZoomPosition="@ZP">
                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                </ChartPrimaryXAxis>
                <ChartPrimaryYAxis Minimum="81" Maximum="87" Interval="2" Title="Million in USD"
                                   LabelFormat="{value}M">
                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                    <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                </ChartPrimaryYAxis>
                <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
                <ChartArea>
                    <ChartAreaBorder Color="Transparent"></ChartAreaBorder>
                </ChartArea>
                <ChartSeriesCollection>
                    <ChartSeries Fill="rgba(255, 64, 129, 0.3)" DataSource="@ExportData" XName="xDate" Name="Close" Width="2" YName="Close" Type="ChartSeriesType.SplineArea"></ChartSeries>
                </ChartSeriesCollection>
                <ChartLegendSettings Visible="false"></ChartLegendSettings>
            </SfChart>
        </div>
    </div>
    <div class="col-lg-3 property-section" style="margin-top:40px">
        <table>
            <tbody>
                <tr align="center">
                    <td>
                        <div>
                            <Syncfusion.Blazor.Buttons.SfButton Content="Print" @onclick="PrintChart" IsPrimary="true" CssClass="e-flat"></Syncfusion.Blazor.Buttons.SfButton>
                        </div>
                    </td>
                </tr>
                <tr align='center'>
                    <td colspan="2">
                        <div>
                            <Syncfusion.Blazor.Buttons.SfButton Content="Export" @onclick="ExportChart" IsPrimary="true" CssClass="e-flat"></Syncfusion.Blazor.Buttons.SfButton>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>
}
@code{
    private ChartData[] ExportData;
    SfChart ChartObj;
    SfRangeNavigator RangeObj;
    double ZF = 1;
    double ZP = 0;
    List<String> containerID = new List<String>() {"range", "chart"};
    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() =>
        {
            ExportData = JsonConvert.DeserializeObject<ChartData[]>(System.IO.File.ReadAllText("./wwwroot/scripts/range-navigator/ExportData.json"));
        });
    }
    public class ChartData
    {
        public DateTime xDate { get; set; }
        public double Open { get; set; }
        public double High { get; set; }
        public double Low { get; set; }
        public double Close { get; set; }
    }
    private DateTime[] Value = new DateTime[] { new DateTime(2013, 05, 01), new DateTime(2013, 08, 01) };
    protected void OnRangeChanged(IChangedEventArgs args)
    {
        ZF = args.ZoomFactor;
        ZP = args.ZoomPosition;
        StateHasChanged();
    }
    public void PrintChart(MouseEventArgs args)
    {
        RangeObj.Print(containerID.ToArray());
    }
    public void ExportChart(MouseEventArgs args)
    {
        ChartObj.Export(ExportType.PNG, "Chart");
    }

    string CurrentUri;
    void BeforeRender(IRangeLoadedEventArgs Args)
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Args.Theme = ChartTheme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Args.Theme = ChartTheme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Args.Theme = ChartTheme.HighContrast;
        }
        else
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
    }

    void ChartLoad(ILoadedEventArgs Args)
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Args.Theme = ChartTheme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Args.Theme = ChartTheme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap4") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Args.Theme = ChartTheme.HighContrast;
        }
        else
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
    }
}
<style>

    #button-control {
        width: 100%;
        text-align: center;
    }

    #control-container {
        padding: 0px !important;
    }

    .e-export-icon::before {
        content: '\e728';
    }

    .e-print-icon::before {
        content: '\e813';
    }
</style>