@page "/range-selector/numeric-axis"
@using Syncfusion.Blazor.Charts
@using Newtonsoft.Json
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;
@if (AusData == null && SlData == null)
{
    <div class="stockchartloader"></div>
}
else
{
<div class="control-section" align="center">
    <h4 style="font-family: Segoe UI;font-weight: 500; font-style:normal; font-size:15px;">Score Comparision AUS vs SL</h4>
    <div>
        <SfRangeNavigator LabelPosition="AxisPosition.Outside" Value="@Value">
            <RangeNavigatorEvents Load="BeforeRender" Changed="OnRangeChanged"></RangeNavigatorEvents>
			<RangeNavigatorRangeTooltipSettings Enable="true"></RangeNavigatorRangeTooltipSettings>
            <RangeNavigatorSeriesCollection>
                <RangeNavigatorSeries DataSource="@AusData" Width="2" XName="x" Type="RangeNavigatorType.Line" YName="y">
                </RangeNavigatorSeries>
                <RangeNavigatorSeries DataSource="@SlData" Width="2" XName="x" Type="RangeNavigatorType.Line" YName="y">
                </RangeNavigatorSeries>
            </RangeNavigatorSeriesCollection>
        </SfRangeNavigator>
    </div>
    <div id="chartcontainer">
        <SfChart>
            <ChartEvents Load="ChartLoad" />
            <ChartArea><ChartAreaBorder Width="0" Color="transparent"></ChartAreaBorder></ChartArea>
            <ChartPrimaryXAxis EdgeLabelPlacement="EdgeLabelPlacement.Shift" Title="Overs" ZoomFactor="@ZF" ZoomPosition="@ZP">
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            </ChartPrimaryXAxis>
            <ChartPrimaryYAxis Minimum="0" Title="Runs">
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            </ChartPrimaryYAxis>
            <ChartAnnotations>
                <ChartAnnotation Content="<div></div>" X="85%" Y="15%" CoordinateUnits="Syncfusion.Blazor.Charts.Units.Pixel" Region="Regions.Chart"></ChartAnnotation>
            </ChartAnnotations>
            <ChartSeriesCollection>
                <ChartSeries DataSource="@AusData" XName="x" YName="y" Name="AUS" Width="2" Type="ChartSeriesType.Spline">
                    <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                </ChartSeries>
                <ChartSeries DataSource="@SlData" XName="x" YName="y" Name="SL" Width="2" Type="ChartSeriesType.Spline">
                    <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
                </ChartSeries>
            </ChartSeriesCollection>
            <ChartTooltipSettings Enable="false" Shared="false"></ChartTooltipSettings>
            <ChartLegendSettings Visible="false"></ChartLegendSettings>
        </SfChart>
    </div>
</div>
}
@code{
    private ChartData[] AusData;
    private ChartData[] SlData;
    double ZF = 1;
    double ZP = 0;
    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() =>
        {
            AusData = JsonConvert.DeserializeObject<ChartData[]>(System.IO.File.ReadAllText("./wwwroot/scripts/range-navigator/double_data_aus.json"));
            SlData = JsonConvert.DeserializeObject<ChartData[]>(System.IO.File.ReadAllText("./wwwroot/scripts/range-navigator/double_data_sl.json"));
        });
    }
    public class ChartData
    {
        public double x { get; set; }
        public double y { get; set; }
        public bool isWicket { get; set; }
    }
    private int[] Value = new int[] {31,50};
    public void OnRangeChanged(IChangedEventArgs args)
    {
        ZF = args.ZoomFactor;
        ZP = args.ZoomPosition;
        StateHasChanged();
    }

    string CurrentUri;
    void BeforeRender(IRangeLoadedEventArgs Args)
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Args.Theme = ChartTheme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Args.Theme = ChartTheme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Args.Theme = ChartTheme.HighContrast;
        }
        else
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
    }

    void ChartLoad(ILoadedEventArgs Args)
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Args.Theme = ChartTheme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Args.Theme = ChartTheme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap4") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Args.Theme = ChartTheme.HighContrast;
        }
        else
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
    }
}
