@page "/stock-chart/multiple-series"
@using Syncfusion.Blazor.Charts
@using Newtonsoft.Json
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;

@if (DataSource == null)
{
    <div class="stockchartloader"></div>
}
else
{
    <div class="@loadClass"></div>
    <div class="@loadDiv">
        <SfStockChart Title="Multiple Series" IndicatorType="@Indicators" TrendlineType="@TrendLines">
            <StockChartEvents Loaded="@ChartLoaded" Load="BeforeRender"></StockChartEvents>
            <StockChartPrimaryXAxis>
                <StockChartAxisMajorGridLines Width="0"></StockChartAxisMajorGridLines>
                <StockChartAxisCrosshairTooltip Enable="true"></StockChartAxisCrosshairTooltip>
            </StockChartPrimaryXAxis>
            <StockChartPrimaryYAxis Interval="40">
                <StockChartAxisLineStyle Color="Transparent"></StockChartAxisLineStyle>
                <StockChartAxisMajorTickLines Width="0" Color="Transparent"></StockChartAxisMajorTickLines>
                <StockChartAxisCrosshairTooltip Enable="true"></StockChartAxisCrosshairTooltip>
            </StockChartPrimaryYAxis>
            <StockChartCrosshairSettings Enable="true"></StockChartCrosshairSettings>
            <StockChartSeriesCollection>
                <StockChartSeries DataSource="@DataSource" Type="ChartSeriesType.Line" XName="x" YName="close" Name="Apple"></StockChartSeries>
                <StockChartSeries DataSource="@DataSource2" Type="ChartSeriesType.Line" XName="x" YName="close" Name="Google"></StockChartSeries>
            </StockChartSeriesCollection>
            <StockChartChartArea>
                <StockChartChartAreaBorder Width="0"></StockChartChartAreaBorder>
            </StockChartChartArea>
        </SfStockChart>
    </div>
    <style>
        .stockchartloader {
            border: 6px solid #f3f3f3;
            border-top: 6px solid #7a0fff;
            width: 40px;
            height: 40px;
            position: absolute;
            top: 46%;
            left: 46%;
            border-radius: 50%;
            -webkit-animation: loader 2s linear infinite;
            animation: loader 2s linear infinite;
        }

        .stockchartdiv {
            visibility: hidden;
        }
    </style>
}
@code{

    private ChartData[] DataSource;
    private ChartData[] DataSource2;
    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() =>
        {
            DataSource = JsonConvert.DeserializeObject<ChartData[]>(System.IO.File.ReadAllText("./wwwroot/scripts/StockChartData/goog.json"));
            DataSource2 = JsonConvert.DeserializeObject<ChartData[]>(System.IO.File.ReadAllText("./wwwroot/scripts/StockChartData/googl.json"));
        });
    }
    public class ChartData
    {
        public DateTime x { get; set; }
        public double open { get; set; }
        public double low { get; set; }
        public double close { get; set; }
        public double high { get; set; }
        public double volume { get; set; }
    }

    string loadClass = "stockchartloader";
    string loadDiv = "stockchartdiv";
    List<TechnicalIndicators> Indicators = new List<TechnicalIndicators>() { };
    List<TrendlineTypes> TrendLines = new List<TrendlineTypes>() { };
    void ChartLoaded(IStockChartEventArgs args)
    {
        loadClass = "";
        loadDiv = "";
    }

     string CurrentUri;
    void BeforeRender(IStockChartEventArgs Args)
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Args.Theme = ChartTheme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Args.Theme = ChartTheme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Args.Theme = ChartTheme.HighContrast;
        }
        else
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
    }

}
