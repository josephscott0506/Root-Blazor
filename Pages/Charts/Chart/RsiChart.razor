@page "/chart/relative-strength-index-indicator"
@using Newtonsoft.Json
@using Syncfusion.Blazor.Charts
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;
@if (IndicatorData == null)
{
    <div class="stockchartloader"></div>
}
else
{
    <div class="control-section">
        <SfChart Title="AAPL - 2012-2017">
             <ChartEvents Load="ChartLoad"/>
            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" ZoomFactor="0.2" ZoomPosition="0.6">
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                <ChartAxisCrosshairTooltip Enable="true"></ChartAxisCrosshairTooltip>
            </ChartPrimaryXAxis>
            <ChartPrimaryYAxis Title="Price" LabelFormat="${value}M" Minimum="50"
                               Maximum="170" Interval="30" RowIndex="1" OpposedPosition="true">
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            </ChartPrimaryYAxis>
            <ChartAxes>
                <ChartAxis Name="secondary" OpposedPosition="true" RowIndex="0" Interval="60"
                           Minimum="0" Maximum="120" Title="RSI">
                    <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                    <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                    @*<ChartStripLines>
                            <ChartStripLine ZIndex="ZIndex.Behind" start="0" end="120" Text="" Color="black" Visible="true" Opacity="0.03"></ChartStripLine>
                        </ChartStripLines>*@
                </ChartAxis>
            </ChartAxes>
            <ChartRows>
                <ChartRow Height="40%"></ChartRow>
                <ChartRow Height="60%"></ChartRow>
            </ChartRows>
            <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
            <ChartLegendSettings Visible="false"></ChartLegendSettings>
            <ChartArea>
                <ChartAreaBorder Width="0"></ChartAreaBorder>
            </ChartArea>
            <ChartZoomSettings EnablePinchZooming="true" EnableSelectionZooming="true" Mode="ZoomMode.X"></ChartZoomSettings>
            <ChartCrosshairSettings Enable="true" LineType="LineType.Vertical"></ChartCrosshairSettings>
            <ChartSeriesCollection>
                <ChartSeries DataSource="@IndicatorData" XName="x" YName="y" Low="low" High="high" Close="close" Volume="volume" Open="open"
                             Width="2" Name="Apple Inc" Type="ChartSeriesType.Candle" BearFillColor="#2ecd71" BullFillColor="#e74c3d">
                </ChartSeries>
            </ChartSeriesCollection>
            <ChartIndicators>
                <ChartIndicator Type="TechnicalIndicators.Rsi" Field="FinancialDataFields.Close" YAxisName="secondary" SeriesName="Apple Inc" ShowZones="true" OverBought="70" OverSold="30" Fill="#6063ff" Period="3">
                    <ChartIndicatorLowerLine Color="#e74c3d"></ChartIndicatorLowerLine>
                    <ChartIndicatorUpperLine Color="#2ecd71"></ChartIndicatorUpperLine>
                </ChartIndicator>
            </ChartIndicators>
        </SfChart>
    </div>
}
@code{
    private ChartData[] IndicatorData;
    protected override async Task OnInitializedAsync()
    {
        //indicatorData = await Http.GetJsonAsync<ChartData[]>("scripts/chart/financial-data.json");
        await Task.Run(() =>
        {
            IndicatorData = JsonConvert.DeserializeObject<ChartData[]>(System.IO.File.ReadAllText("./wwwroot/scripts/chart/financial-data.json"));
        });
    }
    public class ChartData
    {
        public DateTime x { get; set; }
        public double high { get; set; }
        public double low { get; set; }
        public double open { get; set; }
        public double close { get; set; }
        public double volume { get; set; }
    }
string CurrentUri;
    void ChartLoad(ILoadedEventArgs Args)
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Args.Theme = ChartTheme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Args.Theme = ChartTheme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap4") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Args.Theme = ChartTheme.HighContrast;
        }
        else
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
    }
}
