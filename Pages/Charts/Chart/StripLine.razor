@page "/chart/strip-line"
@using Syncfusion.Blazor.Charts
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;
    <div class="control-section">
        <SfChart Title="Weather Report">
         <ChartEvents Load="ChartLoad"/>
            <ChartArea>
                <ChartAreaBorder Width="0"></ChartAreaBorder>
            </ChartArea>
            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category">
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            </ChartPrimaryXAxis>

            <ChartPrimaryYAxis Minimum="10" Maximum="40" Interval="5" LabelFormat="{value}°C" RangePadding="Syncfusion.Blazor.Charts.ChartRangePadding.None">
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                <ChartAxisLineStyle Color="#808080"></ChartAxisLineStyle>
                <ChartStriplines>
                    <ChartStripline Start="30" End="40" Text="High Temperature" Color="#ff512f" Visible="true">
                        <ChartStriplineTextStyle Size="18px" Color="#ffffff" FontWeight="600"></ChartStriplineTextStyle>
                        <ChartStriplineBorder Width="0"></ChartStriplineBorder>
                    </ChartStripline>
                    <ChartStripline Start="20" End="30" Text="Average Temperature" Color="#fc902a" Visible="true">
                        <ChartStriplineTextStyle Size="18px" Color="#ffffff" FontWeight="600"></ChartStriplineTextStyle>
                        <ChartStriplineBorder Width="0"></ChartStriplineBorder>
                    </ChartStripline>
                    <ChartStripline Start="10" End="20" Text="Low Temperature" Color="#f9d423" Visible="true">
                        <ChartStriplineTextStyle Size="18px" Color="#ffffff" FontWeight="600"></ChartStriplineTextStyle>
                        <ChartStriplineBorder Width="0"></ChartStriplineBorder>
                    </ChartStripline>
                </ChartStriplines>
            </ChartPrimaryYAxis>

            <ChartSeriesCollection>
                <ChartSeries Name="Weather" Type="ChartSeriesType.Line" DataSource="@WeatherReports" Fill="#ffffff" XName="XValue" YName="YValue" Width="2">
                    <ChartMarker Visible="true" Width="10" Height="10" Fill="#666666">
                        <ChartMarkerBorder Width="2" Color="#ffffff"></ChartMarkerBorder>
                    </ChartMarker>
                </ChartSeries>
            </ChartSeriesCollection>

            <ChartLegendSettings Visible="false"></ChartLegendSettings>

            <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
        </SfChart>
    </div>

@code{
    public class ChartData
    {
        public string XValue;
        public double YValue;
    }

    public List<ChartData> WeatherReports = new List<ChartData>
    {
        new ChartData { XValue = "Sun", YValue = 25 },
        new ChartData { XValue = "Mon", YValue = 27 },
        new ChartData { XValue = "Tue", YValue = 33 },
        new ChartData { XValue = "Wed", YValue = 36 },
        new ChartData { XValue = "Thu", YValue = 26 },
        new ChartData { XValue = "Fri", YValue = 27.5 },
        new ChartData { XValue = "Sat", YValue = 23 },
    };
string CurrentUri;
    void ChartLoad(ILoadedEventArgs Args)
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Args.Theme = ChartTheme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Args.Theme = ChartTheme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap4") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Args.Theme = ChartTheme.HighContrast;
        }
        else
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
    }
}