@page "/chart/zooming"
@using Syncfusion.Blazor.Charts
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;

<div class="control-section">
    <SfChart Title="Sales History of Product X">
     <ChartEvents Load="ChartLoad"/>
        <ChartPrimaryXAxis Title="Years" ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" Skeleton="yMMM" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Title="Profit ($)" RangePadding="ChartRangePadding.None">
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryYAxis>
        <ChartLegendSettings Visible="false"></ChartLegendSettings>
        <ChartZoomSettings EnableMouseWheelZooming="true" EnableScrollbar="true" EnablePinchZooming="true" EnableSelectionZooming="true"></ChartZoomSettings>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@DataSource" Name="Warmest" XName="X" Width="2" Opacity="1" YName="Y" Type="ChartSeriesType.Area" Fill="url(#gradient-chart)">
                <ChartSeriesBorder Width="0.5" Color="#00bdae"></ChartSeriesBorder>
            </ChartSeries>
        </ChartSeriesCollection>
        <ChartArea>
            <ChartAreaBorder Width="0"></ChartAreaBorder>
        </ChartArea>
    </SfChart>
</div>

@code {
    Random random = new Random();
    List<ZoomingandPanningData> DataSource = new List<ZoomingandPanningData>();
public double Value = 80;
public class ZoomingandPanningData
{
    public DateTime X { get; set; }
    public double Y { get; set; }
}
protected override async Task OnInitializedAsync()
{
    await Task.Run(() =>
    {
        for (int i = 1; i< 500; i++) {
            if (random.NextDouble() > .5) {
                this.Value += random.NextDouble();
            } else {
                this.Value -= random.NextDouble();
            }
            DataSource.Add(new ZoomingandPanningData
            {
                X = new DateTime(1960, 1, 1).AddMonths(i+1).AddDays(i),
                Y = Math.Round(this.Value)
            });
        }
    });
}

string CurrentUri;
void ChartLoad(ILoadedEventArgs Args)
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Args.Theme = ChartTheme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Args.Theme = ChartTheme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap4") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Args.Theme = ChartTheme.HighContrast;
        }
        else
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
    }
}
<svg style="height: 0">
    <defs>
        <linearGradient id="gradient-chart" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0" />
            <stop offset="1" />
        </linearGradient>
    </defs>
</svg>
<style>

    #gradient-chart stop {
        stop-color: #BDEDE9;
    }

        #gradient-chart stop[offset="0"] {
            stop-opacity: 0.75;
        }

        #gradient-chart stop[offset="1"] {
            stop-opacity: 0;
        }
</style>
