@page "/chart/polar-line"
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;
<div class="row">
    <div class="col-lg-9 control-section">
        <SfChart @ref="@ChartObj" Title="Alaska Weather Statistics - 2016">
         <ChartEvents Load="ChartLoad"/>
            <ChartTooltipSettings Enable="true">
            </ChartTooltipSettings>
            <ChartPrimaryXAxis IsInversed="@IsInversed" StartAngle="@StartAngle" Interval="1" LabelPlacement="LabelPlacement.OnTicks" ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Title="Months"></ChartPrimaryXAxis>
            <ChartPrimaryYAxis IsInversed="@IsInversed" Title="Temperature (Celsius)" Minimum="-25" Maximum="25" Interval="10" EdgeLabelPlacement="EdgeLabelPlacement.Shift" LabelFormat="{value}°C"></ChartPrimaryYAxis>
            <ChartSeriesCollection>
                <ChartSeries IsClosed="@IsClosed" DataSource="@DataSource" Name="Germany" XName="xValue" Width="2" Opacity="1" YName="yValue" Type="@SeriesType">
                    <ChartMarker Visible="true" Height="10" Width="10" Shape="ChartShape.Pentagon"></ChartMarker>
                </ChartSeries>
                <ChartSeries IsClosed="@IsClosed" DataSource="@DataSource" Name="England" XName="xValue" Width="2" Opacity="1" YName="yValue1" Type="@SeriesType">
                    <ChartMarker Visible="true" Height="10" Width="10" Shape="ChartShape.Pentagon"></ChartMarker>
                </ChartSeries>
            </ChartSeriesCollection>
        </SfChart>
    </div>
    <div class="col-lg-3 property-section">
        <table style="width: 100%">
            <tr style="height:50px"><th>Properties</th></tr>
            <tr style="height: 50px">
                <td style="width: 50%">
                    <div>
                        Series Type:
                    </div>
                </td>
                <td style="width: 50%;">
                    <SfDropDownList TValue="string" TItem="SeriesTypes" @bind-Value="@DropVal" DataSource="@Country">
                        <DropDownListEvents TValue="string" ValueChange="ChangeSeriesType"></DropDownListEvents>
                        <DropDownListFieldSettings Value="Type"></DropDownListFieldSettings>
                    </SfDropDownList>
                </td>
            </tr>
            <tr style="height: 50px">
                <td style="width: 50%">
                    <div>Closed: </div>
                </td>
                <td style="width: 50%;">
                    <div>
                        <SfCheckBox Checked="@IsClosed" ValueChange="@CheckClosed"></SfCheckBox>
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td style="width: 30%">
                    <div>
                        Start Angle:
                        <p style="font-weight: normal;"><span>@StartAngle</span></p>
                    </div>
                </td>
                <td style="width: 70%;">
                    <div class="">
                        <input type="range" @onchange="ChangeAngle" value="@StartAngle" min="0" max="360" style="width:90%" />
                    </div>
                </td>
            </tr>
            <tr style="height: 50px">
                <td style="width: 50%">
                    <div>Inversed: </div>
                </td>
                <td style="width: 50%;">
                    <div>
                        <SfCheckBox Checked="@IsInversed" ValueChange="@checkInversed"></SfCheckBox>
                    </div>
                </td>
            </tr>
        </table>
    </div>
</div>

@code{
    public string DropVal = "Polar";

    public class SeriesTypes
    {
        public string Type { get; set; }

        public string Code { get; set; }
    }

    List<SeriesTypes> Country = new List<SeriesTypes>
{
        new SeriesTypes() { Type = "Polar", Code = "P" },
        new SeriesTypes() { Type = "Radar", Code = "R" },
    };

    ChartSeriesType SeriesType = ChartSeriesType.Polar;
    public void ChangeSeriesType(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        this.SeriesType = (ChartSeriesType)Enum.Parse(typeof(ChartSeriesType), args.Value.ToString(), true);
        StateHasChanged();
    }

    SfChart ChartObj;
    private Boolean IsInversed = false;
    private Boolean IsClosed = true;
    public int StartAngle = 0;
    public void checkInversed(Syncfusion.Blazor.Buttons.ChangeEventArgs args)
    {
        IsInversed = args.Checked;
    }
    public void CheckClosed(Syncfusion.Blazor.Buttons.ChangeEventArgs args)
    {
        IsClosed = args.Checked;
        ChartObj.Refresh();
    }
    private void ChangeAngle(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        StartAngle = Convert.ToInt32(args.Value);
    }

   
    public class PolarLineChartData
    {
        public string xValue { get; set; }
        public double yValue { get; set; }
        public double yValue1 { get; set; }
    }
    public List<PolarLineChartData>
    DataSource = new List<PolarLineChartData>
        {
        new PolarLineChartData { xValue = "Jan", yValue = -7.1, yValue1 = -17.4 },
        new PolarLineChartData { xValue = "Feb", yValue = -3.7, yValue1 = -15.6  },
        new PolarLineChartData { xValue = "Mar", yValue = 0.8, yValue1 = -12.3  },
        new PolarLineChartData { xValue = "Apr", yValue = 6.3, yValue1 = -5.3 },
        new PolarLineChartData { xValue = "May", yValue = 13.3, yValue1 = 1.0 },
        new PolarLineChartData { xValue = "Jun", yValue = 18.0, yValue1 =  6.9  },
        new PolarLineChartData { xValue = "Jul", yValue = 19.8 , yValue1 = 9.4 },
        new PolarLineChartData { xValue = "Aug", yValue = 18.1, yValue1 = 7.6 },
        new PolarLineChartData { xValue = "Sep", yValue = 13.1 , yValue1 = 2.6 },
        new PolarLineChartData { xValue = "Oct", yValue = 4.1, yValue1 = -4.9},
        new PolarLineChartData { xValue = "Nov", yValue = -3.8, yValue1 = -13.4 },
        new PolarLineChartData { xValue = "Dec", yValue = -6.8, yValue1 = -16.4 },
        };

    string CurrentUri;
    void ChartLoad(ILoadedEventArgs Args)
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Args.Theme = ChartTheme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Args.Theme = ChartTheme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap4") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Args.Theme = ChartTheme.HighContrast;
        }
        else
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
    }
        }
