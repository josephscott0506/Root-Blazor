@page "/chart/candle-stick"
@using Syncfusion.Blazor.Charts
@inject NavigationManager NavigationManager
@using Newtonsoft.Json
@inherits SampleBaseComponent;

<div class="control-section">
    <SfChart Title="AAPL Historical">
		<ChartEvents Load="ChartLoad"/>
    <ChartArea>
        <ChartAreaBorder Width="0"></ChartAreaBorder>
    </ChartArea>
    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" >
        <ChartAxisCrosshairTooltip Enable="true"></ChartAxisCrosshairTooltip>
        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
    </ChartPrimaryXAxis>
    <ChartPrimaryYAxis Title="Volume" ValueType="Syncfusion.Blazor.Charts.ValueType.Logarithmic" OpposedPosition="true" Interval="20" LabelFormat="n0">
        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
        <ChartAxisMajorGridLines Width="1"></ChartAxisMajorGridLines>
        <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
    </ChartPrimaryYAxis>
    <ChartAxes>
        <ChartAxis Name="secondary" OpposedPosition="true" RowIndex="1" LabelFormat="n0" Title="Price" RangePadding="ChartRangePadding.None" PlotOffset="30">
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMajorGridLines Width="1"></ChartAxisMajorGridLines>
        </ChartAxis>
    </ChartAxes>
    <ChartRows>
        <ChartRow Height="30%"></ChartRow>
        <ChartRow Height="70%"></ChartRow>
    </ChartRows>
    <ChartLegendSettings Visible="false"></ChartLegendSettings>
    <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
    <ChartCrosshairSettings Enable="true" LineType="LineType.Vertical">
        <ChartCrosshairLine Width="1" ></ChartCrosshairLine>
    </ChartCrosshairSettings>
    <ChartSeriesCollection>
        <ChartSeries Type="ChartSeriesType.Column" DataSource="@StockDetails" Name="Volume" XName="x" YName="volume">

        </ChartSeries>
        <ChartSeries DataSource="@StockDetails" YAxisName="secondary" Name="Apple Inc" XName="x" High="high" Volume="volume" Low="low" Open="open" Close="close"
                     BearFillColor="#2ecd71" BullFillColor="#e74c3d" Type="ChartSeriesType.Candle">
        </ChartSeries>
    </ChartSeriesCollection>
</SfChart>
</div>
@code{
    private ChartData[] StockDetails;
    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() =>
        {
            StockDetails = JsonConvert.DeserializeObject<ChartData[]>(System.IO.File.ReadAllText("./wwwroot/scripts/chart/financial-data.json"));
        });
    }
    public class ChartData
    {
        public DateTime x { get; set; }
        public double high { get; set; }
        public double low { get; set; }
        public double open { get; set; }
        public double close { get; set; }
        public double volume { get; set; }
    }

    string CurrentUri;

    void ChartLoad(ILoadedEventArgs Args)
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Args.Theme = ChartTheme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Args.Theme = ChartTheme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Args.Theme = ChartTheme.HighContrast;
        }
        else
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
    }
}

