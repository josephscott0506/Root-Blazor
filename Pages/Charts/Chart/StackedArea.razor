@page "/chart/stacked-area"
@using Syncfusion.Blazor.Charts
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;

<div class="control-section">
    <SfChart Title="Trend in Sales of Ethical Produce">
     <ChartEvents Load="ChartLoad"/>
        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" LabelFormat="y" IntervalType="IntervalType.Years" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Title="Spends" Minimum="0" Maximum="7" Interval="1" LabelFormat="{value}B">
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
        </ChartPrimaryYAxis>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@ChartData" Name="Organic" XName="x" Width="2"
                         Opacity="1" YName="y" Type="ChartSeriesType.StackingArea">
            </ChartSeries>
            <ChartSeries DataSource="@ChartData" Name="Fair-trade" XName="x" Width="2"
                         Opacity="1" YName="y1" Type="ChartSeriesType.StackingArea">
            </ChartSeries>
            <ChartSeries DataSource="@ChartData" Name="Veg Alternatives" XName="x" Width="2"
                         Opacity="1" YName="y2" Type="ChartSeriesType.StackingArea">
            </ChartSeries>
            <ChartSeries DataSource="@ChartData" Name="Others" XName="x" Width="2"
                         Opacity="1" YName="y3" Type="ChartSeriesType.StackingArea">
            </ChartSeries>
        </ChartSeriesCollection>
    </SfChart>
</div>

@code{

    public class StackedAreaChartData
    {
        public DateTime x { get; set; }
        public double y { get; set; }
        public double y1 { get; set; }
        public double y2 { get; set; }
        public double y3 { get; set; }
    }

    public List<StackedAreaChartData> ChartData = new List<StackedAreaChartData>
        {
               new StackedAreaChartData { x= new DateTime(2000, 01, 01), y= 0.61, y1= 0.03, y2= 0.48, y3= 0.23 },
               new StackedAreaChartData { x= new DateTime(2001, 01, 01), y= 0.81, y1= 0.05, y2= 0.53, y3= 0.17 },
               new StackedAreaChartData { x= new DateTime(2002, 01, 01), y= 0.91, y1= 0.06, y2= 0.57, y3= 0.17 },
               new StackedAreaChartData { x= new DateTime(2003, 01, 01), y= 1.00, y1= 0.09, y2= 0.61, y3= 0.20 },
               new StackedAreaChartData { x= new DateTime(2004, 01, 01), y= 1.19, y1= 0.14, y2= 0.63, y3= 0.23 },
               new StackedAreaChartData { x= new DateTime(2005, 01, 01), y= 1.47, y1= 0.20, y2= 0.64, y3= 0.36 },
               new StackedAreaChartData { x= new DateTime(2006, 01, 01), y= 1.74, y1= 0.29, y2= 0.66, y3= 0.43 },
               new StackedAreaChartData { x= new DateTime(2007, 01, 01), y= 1.98, y1= 0.46, y2= 0.76, y3= 0.51 },
               new StackedAreaChartData { x= new DateTime(2008, 01, 01), y= 1.99, y1= 0.64, y2= 0.77, y3= 0.72 },
               new StackedAreaChartData { x= new DateTime(2009, 01, 01), y= 1.70, y1= 0.75, y2= 0.55, y3= 1.29 },
               new StackedAreaChartData { x= new DateTime(2010, 01, 01), y= 1.48, y1= 1.06, y2= 0.54, y3= 1.38 },
               new StackedAreaChartData { x= new DateTime(2011, 01, 01), y= 1.38, y1= 1.25, y2= 0.57, y3= 1.82 },
               new StackedAreaChartData { x= new DateTime(2012, 01, 01), y= 1.66, y1= 1.55, y2= 0.61, y3= 2.16 },
               new StackedAreaChartData { x= new DateTime(2013, 01, 01), y= 1.66, y1= 1.55, y2= 0.67, y3= 2.51 },
               new StackedAreaChartData { x= new DateTime(2014, 01, 01), y= 1.67, y1= 1.65, y2= 0.67, y3= 2.61 }
        };
string CurrentUri;
        void ChartLoad(ILoadedEventArgs Args)
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Args.Theme = ChartTheme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Args.Theme = ChartTheme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap4") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Args.Theme = ChartTheme.HighContrast;
        }
        else
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
    }
}