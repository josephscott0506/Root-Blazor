@page "/chart/polar-scatter"
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.DropDowns
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;
<div class="row">
<div class="col-lg-9 control-section">
    <SfChart Title="Real GDP Growth">
     <ChartEvents Load="ChartLoad"/>
        <ChartTooltipSettings Enable="true">
        </ChartTooltipSettings>
        <ChartPrimaryYAxis Minimum="0" Maximum="8" Interval="2"></ChartPrimaryYAxis>
        <ChartPrimaryXAxis Interval="1" Coefficient="100" LabelPlacement="LabelPlacement.OnTicks" ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
        <ChartLegendSettings Visible="true">
        </ChartLegendSettings>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@DataSource" Name="2015" XName="x" Width="2" YName="y" Type="@SeriesType" DrawType="ChartDrawType.Scatter">
                <ChartMarker Visible="true" Height="10" Width="10">
                    <ChartDataLabel Name="text"></ChartDataLabel>
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@DataSource" Name="2016" XName="x" Width="2" YName="y1" Type="@SeriesType" DrawType="ChartDrawType.Scatter">
                <ChartMarker Visible="true" Height="10" Width="10" Shape="ChartShape.Diamond">
                    <ChartDataLabel Name="text"></ChartDataLabel>
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@DataSource" Name="2017" XName="x" Width="2" YName="y2" Type="@SeriesType" DrawType="ChartDrawType.Scatter">
                <ChartMarker Visible="true" Height="10" Width="10" Shape="ChartShape.Triangle">
                    <ChartDataLabel Name="text"></ChartDataLabel>
                </ChartMarker>
            </ChartSeries>
        </ChartSeriesCollection>
    </SfChart>
</div>
    <div class="col-lg-3 property-section">
        <table  style="width: 100%">
            <tr style="height:50px"><th>Properties</th></tr>
            <tr style="height: 50px">
                <td style="width: 50%">
                    <div>
                        Series Type:
                    </div>
                </td>
                <td style="width: 50%;">
                    <SfDropDownList TValue="string" TItem="SeriesTypes" @bind-Value="@DropVal" DataSource="@Country">
                        <DropDownListEvents TValue="string" ValueChange="ChangeSeriesType"></DropDownListEvents>
                        <DropDownListFieldSettings Value="Type"></DropDownListFieldSettings>
                    </SfDropDownList>
                </td>
            </tr>
        </table>
    </div>
</div>
@code {
    public string DropVal = "Polar";

    public class SeriesTypes
    {
        public string Type { get; set; }

        public string Code { get; set; }
    }

    List<SeriesTypes> Country = new List<SeriesTypes>
{
        new SeriesTypes() { Type = "Polar", Code = "P" },
        new SeriesTypes() { Type = "Radar", Code = "R" },
    };

    ChartSeriesType SeriesType = ChartSeriesType.Polar;
    public void ChangeSeriesType(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        this.SeriesType = (ChartSeriesType)Enum.Parse(typeof(ChartSeriesType), args.Value.ToString(), true);
        StateHasChanged();
    }
    public class PolarScatterData
    {
        public string text { get; set; }
        public string x { get; set; }
        public double y { get; set; }
        public double y1 { get; set; }
        public double y2 { get; set; }
    }
    public List<PolarScatterData> DataSource = new List<PolarScatterData>
{
          new PolarScatterData { text= "Myanmar", x= "MMR", y= 7.3, y1= 6.3, y2= 7.5 },
                new PolarScatterData { text= "India", x= "IND", y= 7.9, y1= 6.8, y2= 7.2 },
                new PolarScatterData { text= "Bangladesh", x= "BGD", y= 6.8, y1= 6.9, y2= 6.9 },
                new PolarScatterData { text= "Cambodia", x= "KHM", y= 7.0, y1= 7.0, y2= 6.9 },
                new PolarScatterData { text= "China", x= "CHN", y= 6.9, y1= 6.7, y2= 6.6 },
                new PolarScatterData { text= "Bhutan", x= "BTN", y= 6.1, y1= 6.2, y2= 5.9 },
                new PolarScatterData { text= "Iceland", x= "ISL", y= 4.1, y1= 7.2, y2= 5.7 },
                new PolarScatterData { text= "Nepal", x= "NPL", y= 2.7, y1= 0.6, y2= 5.5 },
                new PolarScatterData { text= "Pakistan", x= "PAK", y= 4.0, y1= 4.7, y2= 5.0 },
                new PolarScatterData { text= "Poland", x= "POL", y= 3.9, y1= 2.7, y2= 3.4 },
                new PolarScatterData { text= "Australia", x= "AUS", y= 2.4, y1= 2.5, y2= 3.1 },
                new PolarScatterData { text= "Korea", x= "KOR", y= 2.8, y1= 2.8, y2= 2.7 },
                new PolarScatterData { text= "Singapore", x= "SGP", y= 1.9, y1= 2.0, y2= 2 },
                new PolarScatterData { text= "Canada", x= "CAN", y= 0.9, y1= 1.4, y2= 1.9 },
                new PolarScatterData { text= "Germany", x= "DEU", y= 1.5, y1= 1.8, y2= 1.6 },
                new PolarScatterData { text= "Denmark", x= "DNK", y= 1.6, y1= 1.1, y2= 1.5 },
                new PolarScatterData { text= "France", x= "FRA", y= 1.3, y1= 1.3, y2= 1.4 },
                new PolarScatterData { text= "Austria", x= "AUT", y= 1.0, y1= 1.5, y2= 1.4 }
    };
    string CurrentUri;
    void ChartLoad(ILoadedEventArgs Args)
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Args.Theme = ChartTheme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Args.Theme = ChartTheme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap4") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Args.Theme = ChartTheme.HighContrast;
        }
        else
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
    }
}