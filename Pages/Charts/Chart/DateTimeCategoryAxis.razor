@page "/chart/date-time-category-axis"
@using Syncfusion.Blazor.Charts
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;

<div class="control-section">
    <SfChart Title="Sales comparison of a Product">
		<ChartEvents Load="ChartLoad"/>
        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
        <ChartPrimaryXAxis Title="Business Days" IntervalType="IntervalType.Days" Skeleton="Ed" ValueType="Syncfusion.Blazor.Charts.ValueType.DateTimeCategory" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Minimum="0" Maximum="100" Interval="20" LabelFormat="{value}M" RangePadding="ChartRangePadding.None">
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
        </ChartPrimaryYAxis>
        <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@ChartData" XName="xValue" YName="yValue1" Opacity="1" Name="Product" Width="2" Type="ChartSeriesType.Column">
            </ChartSeries>
        </ChartSeriesCollection>
        @*<ChartAnnotations>
            <ChartAnnotation X="2017-11-22" Y="90" Content="<div style='color:#FF0000;font-family: bold; font-weight: 600'>Christmas Offer<br> Dec 2017</div>" CoordinateUnits="Units.Point"></ChartAnnotation>
            <ChartAnnotation X="2018-01-04" Y="90" Content="<div style='color:#FF0000;font-family: bold; font-weight: 800'>New Year Offer<br> Jan 2018</div>" CoordinateUnits="Units.Point"></ChartAnnotation>
        </ChartAnnotations>*@
        <ChartLegendSettings Visible="false"></ChartLegendSettings>
    </SfChart>
</div>

@code{
    public class DateTimeData
    {
        public DateTime xValue  { get; set; }
        public double yValue1  { get; set; }
    }
    //public List<ChartStripLines> striplines = new List<ChartStripLines>();
    //private ChartStripLine strip1 = new ChartStripLine
    //{
    //    Visible = true,
    //    Color = "skyblue",
    //    Opacity = 0.5
    //};
    //private ChartStripLine strip2 = new ChartStripLine
    //{
    //    Visible = true,
    //    Color = "pink",
    //    Opacity = 0.5
    //};

    public List<DateTimeData> ChartData = new List<DateTimeData>
        {
                new DateTimeData { xValue = new DateTime(2017, 12, 20), yValue1 = 21},
                new DateTimeData { xValue = new DateTime(2017, 12, 21), yValue1 = 24 },
                new DateTimeData { xValue = new DateTime(2017, 12, 22), yValue1 = 24},
                new DateTimeData { xValue = new DateTime(2017, 12, 26), yValue1 = 70},
                new DateTimeData { xValue = new DateTime(2017, 12, 27), yValue1 = 75 },
                new DateTimeData { xValue = new DateTime(2018, 1, 2), yValue1 = 82 },
                new DateTimeData { xValue = new DateTime(2018, 1, 3), yValue1 = 53 },
                new DateTimeData { xValue = new DateTime(2018, 1, 4), yValue1 = 54 },
                new DateTimeData { xValue = new DateTime(2018, 1, 5), yValue1 = 53},
                new DateTimeData { xValue = new DateTime(2018, 1, 8), yValue1 = 45 },
            };

    string CurrentUri;

    void ChartLoad(ILoadedEventArgs Args)
    {
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Args.Theme = ChartTheme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Args.Theme = ChartTheme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Args.Theme = ChartTheme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Args.Theme = ChartTheme.HighContrast;
        }
        else
        {
            Args.Theme = ChartTheme.Bootstrap4;
        }
    }
}
