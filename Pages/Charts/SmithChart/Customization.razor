@page "/smith-chart/customization"

@using Syncfusion.Blazor.Charts;
@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.DropDowns;
@using Syncfusion.Blazor.Inputs;

@inherits SampleBaseComponent;

<div class="row">
<div class="col-lg-9 control-section sb-property-border">
        <SfSmithchart Radius="smithchartRadius">
            <SmithchartHorizontalAxis>
                <SmithchartHorizontalMinorGridLines Visible="true"></SmithchartHorizontalMinorGridLines>
            </SmithchartHorizontalAxis>
            <SmithchartRadialAxis>
                <SmithchartRadialMinorGridLines Visible="true"></SmithchartRadialMinorGridLines>
            </SmithchartRadialAxis>
            <SmithchartTitle Visible="true" Text="Impedance Transmission" EnableTrim="true" MaximumWidth="200">
                <SmithchartTitleFont Size="16px"></SmithchartTitleFont>
            </SmithchartTitle>
            <SmithchartLegendSettings Visible="smithchartLegend" Shape="Circle" Position="@smithchartLegendPostion">
                <SmithchartBorder Color="transparent"></SmithchartBorder>
            </SmithchartLegendSettings>
            <SmithchartSeriesCollection>
                <SmithchartSeries Name="Transmission1" Points="@FirstTransmissionData"
                                  EnableAnimation="smithchartAnimation" EnableSmartLabels="false"
                                  Fill="#0F94C4" Width="2">
                    <SmithchartSeriesTooltip Visible="smithchartTooltip"></SmithchartSeriesTooltip>
                    <SmithchartSeriesMarker Visible="smithchartMarker" Shape="Rectangle">
                        <SmithchartSeriesDatalabel Visible="smithchartDatalabel"></SmithchartSeriesDatalabel>
                        <SmithchartSeriesMarkerBorder Width="2">
                        </SmithchartSeriesMarkerBorder>
                    </SmithchartSeriesMarker>
                </SmithchartSeries>
                <SmithchartSeries Name="Transmission2" Points="@SecondTransmissionData"
                                  EnableAnimation="smithchartAnimation" EnableSmartLabels="false" Fill="#EE0C88" Width="2">
                    <SmithchartSeriesTooltip Visible="smithchartTooltip"></SmithchartSeriesTooltip>
                    <SmithchartSeriesMarker Visible="smithchartMarker" Shape="Rectangle">
                        <SmithchartSeriesDatalabel Visible="smithchartDatalabel"></SmithchartSeriesDatalabel>
                        <SmithchartSeriesMarkerBorder Width="2">
                        </SmithchartSeriesMarkerBorder>
                    </SmithchartSeriesMarker>
                </SmithchartSeries>
            </SmithchartSeriesCollection>
        </SfSmithchart>
</div>
<div class="col-md-3 property-section">
        <div class="property-panel-header">Properties</div>
            <table style="width: 90%" >
                <tbody>
                    <tr style="height: 35px">
                        <td style="width: 70%">
                            Radius<span>&nbsp;&nbsp;&nbsp;@sliderValueText</span>
                        </td>
                        <td style="width: 50%">
                            <SfSlider TValue="double" Value="@radiusSliderValue" Step="0.1" Min="0" Max="1" Type=SliderType.MinRange>
                                <SliderEvents TValue="double" ValueChange="RadiusSlider"></SliderEvents>
                            </SfSlider>
                        </td>
                    </tr>
                    <tr style="height: 35px">
                        <td style="width: 70%">
                            Marker
                        </td>
                        <td style="width: 50%">
                            <SfCheckBox Checked="@markerCheckedState" ValueChange="MarkerCheckbox"></SfCheckBox>
                        </td>
                    </tr>
                    <tr style="height: 35px">
                        <td style="width: 70%">
                            Data Label
                        </td>
                        <td style="width: 50%">
                            <SfCheckBox Checked="@datalabelCheckedState" ValueChange="DatalabelCheckbox"></SfCheckBox>
                        </td>
                    </tr>
                    <tr style="height: 35px">
                        <td style="width: 70%">
                            Animation
                        </td>
                        <td style="width: 50%">
                            <SfCheckBox Checked="@animationCheckedState" ValueChange="AnimationCheckbox"></SfCheckBox>
                        </td>
                    </tr>
                    <tr style="height: 35px">
                        <td style="width: 70%">
                            Tooltip
                        </td>
                        <td style="width: 50%">
                            <SfCheckBox Checked="@tooltipCheckedState" ValueChange="TooltipCheckbox"></SfCheckBox>
                        </td>
                    </tr>
                    <tr style="height: 35px">
                        <td style="width: 70%">
                            Legend
                        </td>
                        <td style="width: 50%">
                            <SfCheckBox Checked="@legendCheckedState" ValueChange="LegendCheckbox"></SfCheckBox>
                        </td>
                    </tr>
                    <tr style="height: 35px">
                        <td style="width: 70%" class="property-text">
                            Legend Position
                        </td>
                        <td style="width: 50%">
                            <SfDropDownList TValue="string" Enabled="@LegendPositionListEnable" TItem="PositionList" DataSource="@PositionData" Value="@legendPositionValue" Width="90px">
                                <DropDownListEvents TValue="string" ValueChange="LegendPositionList"></DropDownListEvents>
                                <DropDownListFieldSettings Text="Name" Value="Name"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
</div>
<style>
    .control-section {
        min-height: 450px;
    }
    .e-range {
        width
    }
    .property-text {
        font-family: "Roboto", "Segoe UI", "GeezaPro", "DejaVu Serif", "sans-serif" !important;
        font-size: 13px !important;
        font-weight: 400 !important;
    }

    #radius > * {
        padding: 0px !important;
    }
    .content-wrapper {
        width: 40%;
        margin: 0 auto;
        min-width: 185px;
    }
    label {
        height: 32px !important;
    }
</style>

@code {
    private double smithchartRadius = 1;
    private bool smithchartMarker = true;
    private bool smithchartDatalabel = false;
    private bool smithchartAnimation = false;
    private bool smithchartTooltip = true;
    private bool smithchartLegend = true;
    private string smithchartLegendPostion = "Top";
    private double sliderValueText = 1;
    private double radiusSliderValue = 1;
    private bool markerCheckedState = true;
    private bool datalabelCheckedState = false;
    private bool animationCheckedState = false;
    private bool tooltipCheckedState = true;
    private bool legendCheckedState = true;
    private string legendPositionValue = "Top";
    private bool LegendPositionListEnable = true;

    public class SmithDataSource
    {
        public double? resistance;
        public double? reactance;
    };
    public List<SmithDataSource> FirstTransmissionData = new List<SmithDataSource> {
        new SmithDataSource { resistance= 10, reactance= 25 },
        new SmithDataSource { resistance= 8, reactance= 6 },
        new SmithDataSource { resistance= 6, reactance= 4.5 },
        new SmithDataSource { resistance= 4.5, reactance= 4 },
        new SmithDataSource { resistance= 3.5, reactance= 3 },
        new SmithDataSource { resistance= 2.5, reactance= 2 },
        new SmithDataSource { resistance= 2, reactance= 1.5 },
        new SmithDataSource { resistance= 1.5, reactance= 1.25 },
        new SmithDataSource { resistance= 1, reactance= 0.9 },
        new SmithDataSource { resistance= 0.5, reactance= 0.6 },
        new SmithDataSource { resistance= 0.3, reactance= 0.4 },
        new SmithDataSource { resistance= 0, reactance= 0.15 }
    };

    public List<SmithDataSource> SecondTransmissionData = new List<SmithDataSource>  {
        new SmithDataSource { resistance= 20, reactance= -50 },
        new SmithDataSource { resistance= 10, reactance= -10 },
        new SmithDataSource { resistance= 9, reactance= -4.5 },
        new SmithDataSource { resistance= 8, reactance= -3.5 },
        new SmithDataSource { resistance= 7, reactance= -2.5 },
        new SmithDataSource { resistance= 6, reactance= -1.5 },
        new SmithDataSource { resistance= 5, reactance= -1 },
        new SmithDataSource { resistance= 4.5, reactance= -0.8 },
        new SmithDataSource { resistance= 3.5, reactance= -0.8 },
        new SmithDataSource { resistance= 2.5, reactance= -0.4 },
        new SmithDataSource { resistance= 2, reactance= -0.2 },
        new SmithDataSource { resistance= 1.5, reactance= 0 },
        new SmithDataSource { resistance= 1, reactance= 0.1 },
        new SmithDataSource { resistance= 0.5, reactance= 0.2 },
        new SmithDataSource { resistance= 0.3, reactance= 0.15 },
        new SmithDataSource { resistance= 0, reactance= 0.05 },
    };
    public class PositionList
    {
        public string Value { get; set; }
        public string Name { get; set; }
    }
    private List<PositionList> PositionData = new List<PositionList> {
        new PositionList { Name= "Top"},
        new PositionList { Name= "Bottom"},
        new PositionList { Name= "Right"},
        new PositionList { Name= "Left"},
    };
    private void RadiusSlider(Syncfusion.Blazor.Inputs.SliderChangeEventArgs<double> args)
    {
        smithchartRadius = args.Value;
        radiusSliderValue = args.Value;
        sliderValueText = radiusSliderValue;
    }
    private void MarkerCheckbox(Syncfusion.Blazor.Buttons.ChangeEventArgs args)
    {
        markerCheckedState = args.Checked;
        smithchartMarker = args.Checked;
    }
    private void DatalabelCheckbox(Syncfusion.Blazor.Buttons.ChangeEventArgs args)
    {
        datalabelCheckedState = args.Checked;
        smithchartDatalabel = args.Checked;
    }
    private void AnimationCheckbox(Syncfusion.Blazor.Buttons.ChangeEventArgs args)
    {
        animationCheckedState = args.Checked;
        smithchartAnimation = args.Checked;
    }
    private void TooltipCheckbox(Syncfusion.Blazor.Buttons.ChangeEventArgs args)
    {
        tooltipCheckedState = args.Checked;
        smithchartTooltip = args.Checked;
    }
    private void LegendCheckbox(Syncfusion.Blazor.Buttons.ChangeEventArgs args)
    {
        legendCheckedState = args.Checked;
        smithchartLegend = args.Checked;
        LegendPositionListEnable = args.Checked;
    }
    private void LegendPositionList(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        legendPositionValue = args.Value;
        smithchartLegendPostion = args.Value;
    }
}