@page "/docio/word-to-pdf"
@inject Microsoft.JSInterop.IJSRuntime JS
@using System.IO
@using Syncfusion.Blazor.Buttons
@using blazor_samples.Data.FileFormats.DocIO
<div class="control-section">
    <p style="font-weight:normal">Click the button to view the generated Word document. Please note that Microsoft Word Viewer or Microsoft Word is required to view the resultant Word document.</p>
    <div class="checkbox-control">
        <div class="row">
            <SfCheckBox Checked="false" Label="Preserve structure tags, generates PDF document with accessiblity support." @onchange="@(() => preserveStructureTags = !preserveStructureTags)"></SfCheckBox>
        </div>
        <div class="row">
            <SfCheckBox Checked="true" Label="Preserve form fields, generates PDF document with PDF form fields for equivalent Word document form fields." @onchange="@(() => preserveFormFields = !preserveFormFields)"></SfCheckBox>
        </div>
        <div class="row">
            <SfCheckBox Checked="true" Label="Convert Word headings to PDF bookmarks, generates PDF document with bookmarks for Word document paragraph with heading style and outline level." @onchange="@(() => preserveWordHeadingsToPDFBookmarks = !preserveWordHeadingsToPDFBookmarks)"></SfCheckBox>
        </div>
        <div class="row">
            <SfCheckBox Checked="false" Label="Show the revision marks in the generated PDF for tracked changes or revisions in the Word document." @onchange="@(() => showRevisions = !showRevisions)"></SfCheckBox>
        </div>
    </div>
    <div class="button-section">
        <div id="button-control">
            <div class="row">
                <div>
                    <SfButton @onclick="ViewTemplate">View Template</SfButton>&nbsp;
                    <SfButton @onclick="GenerateDocument">Convert to PDF</SfButton>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .control-section .row {
        margin: 10px 0;
    }
</style>

@code {
    MemoryStream documentStream;
    bool preserveStructureTags, preserveFormFields, preserveWordHeadingsToPDFBookmarks, showRevisions;

    /// <summary>
    /// Create and download the simple Word document
    /// </summary>
    public async Task GenerateDocument(MouseEventArgs args)
    {
        WordToPDFService service = new WordToPDFService();
        documentStream = service.WordToPDF("Generate Document", preserveStructureTags, preserveFormFields, preserveWordHeadingsToPDFBookmarks, showRevisions);
        await JS.SaveAs("Sample.pdf", documentStream.ToArray());
    }
    /// <summary>
    /// Create and download the template Word document
    /// </summary>
    public async Task ViewTemplate(MouseEventArgs args)
    {
        WordToPDFService service = new WordToPDFService();
        documentStream = service.WordToPDF("View Template", preserveStructureTags, preserveFormFields, preserveWordHeadingsToPDFBookmarks, showRevisions);
        await JS.SaveAs("WordToPDF.docx", documentStream.ToArray());
    }
}