@page "/xlsio/format-cells"
@inject Microsoft.JSInterop.IJSRuntime JS
@inject Microsoft.AspNetCore.Hosting.IHostingEnvironment hostingEnvironment
@using System.IO;

@using Syncfusion.Blazor.Buttons
@*Hidden:Lines*@

@using blazor_samples.Data.FileFormats.XlsIO
@{
    SampleBrowser.CurrentSampleName = "Format Cells";
    SampleBrowser.CurrentControlName = "XlsIO";
    SampleBrowser.CurrentControlCategory = "Formatting";
    SampleBrowser.CurrentControl = SampleBrowser.Config.XlsIO;
    SampleBrowser.ActionDescription = new string[] {
@"<p>This sample demonstrates how to apply formatting to the cells using XlsIO.</p>"
};
    SampleBrowser.Description = new string[] {
@"<p>Formatting worksheets makes them more attractive and easier to use. Excel provides various options for setting font, font size, color, and background. The Format Cells dialog in Excel has six tabs, each with several characteristics that allow you to set various formats for a cell. You can set number formats, horizontal and vertical alignment, text control operations, font and font styles, and borders for the cells.</p>
<p style='display: block'><b>Features:</b></p>
<ul>
<li>Various styles such as colors, font settings, borders, and alignments</li>
<li>Number formats</li>
<li>Patterns</li>
<li>Conditional formatting</li>
<li>RTF</li>
<li>Image insertion</li>
</ul>"
};

}

@*End:Hidden*@

<div class="control-section">
    <p style="font-weight:normal">Click the button to view an Excel spreadsheet generated by Essential XlsIO. Please note that Microsoft Excel Viewer or Microsoft Excel is required to view the resultant document.</p>

    <div class="radio-control">
        <h5 class="row">Save As:</h5>
        <div class="e-radio-wrapper">
            <SfRadioButton Label="XLS" Name="XLS" Value="SaveOption" Checked="@(excelVersion == "XLS")" @onchange="@(() => excelVersion = "XLS")"></SfRadioButton>
        </div>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <div class="e-radio-wrapper">
            <SfRadioButton Label="XLSX" Name="XLSX" Value="SaveOption" Checked="@(excelVersion == "XLSX")" @onchange="@(() => excelVersion = "XLSX")"></SfRadioButton>
        </div>
    </div>
    <div class="button-section">
        <div id="button-control">
            <div class="row">
                <div>
                    <SfButton @onclick="FormatCellsXlsIO">Create Document</SfButton>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .radio-control {
        margin: 5% 0 2% 0;
    }

    .control-section .row {
        margin: 10px 0;
    }
</style>

@code {
    MemoryStream excelStream;
    string excelVersion = "XLSX";

    /// <summary>
    /// Create and download the Excel document with formatting applied to cells
    /// </summary>
    protected void FormatCellsXlsIO()
    {
        FormatCellsService service = new FormatCellsService(hostingEnvironment);
        excelStream = service.FormatCellsXlsIO(excelVersion);
        if (excelVersion == "XLSX")
        {
            JS.SaveAs("Sample.xlsx", excelStream.ToArray());
        }
        else
        {
            JS.SaveAs("Sample.xls", excelStream.ToArray());
        }
    }
}
