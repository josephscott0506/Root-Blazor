@page "/progress-bar/PasswordStrength"
@using Syncfusion.Blazor.ProgressBar
@using Syncfusion.Blazor.Inputs
@inherits SampleBaseComponent;
<div class="control-section" style="overflow: hidden;">
    <div class="row progress-row1">
        <div class="e-input-group parent-progress">
            <div id="progresslinearpassword">
                <SfTextBox Placeholder="@linearPlaceholder" Input="@linearInput" CssClass="e-outline" FloatLabelType="FloatLabelType.Auto" Type="password">
                </SfTextBox>
            </div>
           
            <div id="progresspassword" style="margin-left: 30px;">
                <SfTextBox Placeholder="@circularPlaceholder" Input="@circularInput" CssClass="e-outline" FloatLabelType="FloatLabelType.Auto" Type="password">
                </SfTextBox>
            </div>
            <span class="e-input-group-icon progress-icon" id="progresscontainer" style="float: left; margin-top: 2.5%; margin-left: -5%;">
                <SfProgressBar @ref="proObj" Type="ProgressType.Circular" Width="30" Height="30" Value="@circularvalue" TrackThickness="2"
                                ProgressThickness="2" Minimum="0" Maximum="16" ProgressColor="@CircularprogressColor">
                    <ProgressBarMargin Bottom="0" Top="0" Right="0" Left="5"></ProgressBarMargin>
                </SfProgressBar>
            </span>
        </div>
    </div>
    <div class="row progress-row2">
        <div class="parent-progress1">
            <span class="e-progress-linear" id="progresslinearcontainer">
                <SfProgressBar @ref="proObj1" Type="ProgressType.Linear" Width="70%" Height="30" Value="@Linearvalue" TrackThickness="4"
                                SegmentCount="4" ProgressThickness="4" Minimum="0" Maximum="16" TrackColor="@trackColor" ProgressColor="@progressColor">
                    <ProgressBarMargin Bottom="0" Top="0" Right="0" Left="5"></ProgressBarMargin>
                </SfProgressBar>
            </span>
        </div>
        <div class="col-lg-12 e-progress-label">
            <label id="label" style="text-align: center"></label>
        </div>
    </div>
</div>
@code{
    SfProgressBar proObj, proObj1;
    public double passLength;
    public double circularvalue = 1, Linearvalue = 1;
    public string linearPlaceholder = "New Password", progressColor = "#E42E2F" , trackColor = "#f294b4";
    public string CircularprogressColor = "#eb8034", circularPlaceholder = "New Password";
    //Circulartrackcolor = "transparent";
    public void linearInput(InputEventArgs args)
    {
        passLength = args.Value.Length;
        this.Linearvalue = passLength;
        if (passLength <= 8)
        {
            this.linearPlaceholder = "Week";
            this.progressColor = "#E42E2F";
        } else if (passLength <= 12)
        {
            this.linearPlaceholder = "Good";
            this.progressColor = "#FF9305";
        } else
        {
            this.linearPlaceholder = "Strong";
            this.progressColor = "#2BB20E";
        }
        this.trackColor = "#f294b4";
        if (passLength == 0)
        {
            this.trackColor = "transparent";
        }
        this.Linearvalue = this.Linearvalue > 16 ? 16 : this.Linearvalue;
        proObj.Refresh();
    }

    public void circularInput(InputEventArgs args)
    {
        passLength = args.Value.Length;
        this.circularvalue = passLength;
        if (passLength == 0)
        {
            this.circularPlaceholder = "Very Weak";
            this.CircularprogressColor = "#eb4f34";
        }
        else if (passLength < 6)
        {
            this.circularPlaceholder = "Weak";
            this.CircularprogressColor = "#eb8034";
        }
        else if (passLength < 9)
        {
            this.circularPlaceholder = "Medium";
            this.CircularprogressColor = "#ebb134";
        }
        else if (passLength < 12)
        {
            this.circularPlaceholder = "Strong";
            this.CircularprogressColor = "#cdeb34";
        }
        else
        {
            this.circularPlaceholder = "Very Strong";
            this.CircularprogressColor = "#68eb34";
        }
        this.circularvalue = this.circularvalue > 16 ? 16 : this.circularvalue;
        proObj1.Refresh();
    }
}


<style>
    #control-container {
        padding: 0px !important;
    }

    .progress-icon {
        background: transparent;
        border: 0px !important;
    }

    #progresscontainer {
        left: -5%;
        background-color: transparent;
        padding: 4px;
        margin-top: 2.5%;
    }

    #progresslinearcontainer {
        right: -10;
    }

    .progress-row1 {
        margin-left: 10%;
    }

    .progress-row2 {
        margin-left: 10%;
    }

    .parent-progress {
        margin-left: 10%;
        margin-top: 9%;
        border: 0px !important;
    }

    .parent-progress1 {
        margin-left: 10%;
        border: 0px !important;
        width: 33%;
    }

    .e-progress-label {
        margin-left: 9%;
        border: 0px !important;
    }

    .e-input-group e-control-wrapper e-outline e-float-input {
        width: 100%;
    }

    .span-progress {
        border-width: 0
    }

    .span-progress1 {
        border-width: 0;
    }
</style>