@page "/toast/api"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs

@inherits SampleBaseComponent;

<div class="col-lg-12 control-section toast-api-section">
    <div class="control_wrapper">
        <SfToast @ref="ToastObj" ID="toastApi" Title="@ToastTitle" Content="@ToastContent" Buttons="@ToastButtons" ShowCloseButton="@ShowCloseBtn" ShowProgressBar="@ShowProgressBtn" NewestOnTop="@ShowNewestOnTop" TimeOut="@ToastTimeout">
            <ToastPosition X="Right" Y="Bottom"></ToastPosition>
            <ToastAnimationSettings>
                <ToastAnimationSettingsShow Effect="@ShowEffect" Easing="@ShowEasing" Duration="@ShowDuration"></ToastAnimationSettingsShow>
                <ToastAnimationSettingsHide Effect="@HideEffect" Easing="@HideEasing" Duration="@HideDuration"></ToastAnimationSettingsHide>
            </ToastAnimationSettings>
        </SfToast>
        <div class="row">
            <div class="col-lg-6 padding">
                <div class="input-form">
                    <SfTextBox @ref="TileObj" Placeholder="Enter the title" Input="@HideToast" FloatLabelType="FloatLabelType.Auto"></SfTextBox>
                </div>
                <div class="input-form">
                    <SfTextBox @ref="ContentObj" Multiline="true" Placeholder="Enter the content" Input="@HideToast" FloatLabelType="FloatLabelType.Auto"></SfTextBox>
                </div>
                <div class="group-form e-group">
                    <SfCheckBox ID="closeButton" Label="Show Close Button" ValueChange="@CloseBtnChange"></SfCheckBox>
                </div>
                <div class="group-form">
                    <SfCheckBox ID="progressBar" Label="Show Progress Bar" ValueChange="@ProgressBtnChange"></SfCheckBox>
                </div>
                <div class="group-form">
                    <SfCheckBox ID="newestOnTop" Label="Newest On Top" @bind-Checked="@Checked" ValueChange="@NewestOnTopChange"></SfCheckBox>
                </div>
                <div class="group-form">
                    <SfCheckBox ID="actionButtons" Label="Action Button" ValueChange="ActionBtnChange"></SfCheckBox>
                </div>
                <div class="input-form">
                    <SfTextBox @ref="TimeoutObj" @bind-Value="@TimeoutValue" Placeholder="TimeOut" FloatLabelType="FloatLabelType.Auto"></SfTextBox>
                </div>
            </div>
            <div class="col-lg-6 padding">
                <div class="input-form">
                    <h4> Show Animation</h4>
                    <SfTextBox @ref="ShowDurationObj" @bind-Value="@ShowDurationtValue" Placeholder="Duration" FloatLabelType="FloatLabelType.Auto"></SfTextBox>
                </div>
                <div class="input-form">
                    <SfDropDownList @ref="EasingDropdownObj" TValue="string" TItem="Easing" ID="ShowEasing" Placeholder="Select an Easing" @bind-Value="@EasingValue" DataSource="@Ease">
                        <DropDownListEvents TValue="string" ValueChange="@EasingChange"></DropDownListEvents>
                        <DropDownListFieldSettings Text="text" Value="value"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
                <div class="input-form">
                    <SfDropDownList @ref="ShowDropdownObj" TValue="string" TItem="Positions" ID="ShowAnimation" Placeholder="Select an Animation" @bind-Value="@AnimationValue" DataSource="@Show">
                        <DropDownListEvents TValue="string" ValueChange="@ShowChange"></DropDownListEvents>
                        <DropDownListFieldSettings Text="text" Value="value"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
                <div class="input-form e-group">
                    <h4> Hide Animation</h4>
                    <SfTextBox @ref="HideDurationObj" @bind-Value="@HideDurationtValue" Placeholder="Duration" FloatLabelType="FloatLabelType.Auto"></SfTextBox>
                </div>
                <div class="input-form">
                    <SfDropDownList @ref="HideEasingDropdownObj" TValue="string" TItem="Easing" ID="HideEasing" Placeholder="Select an Easing" @bind-Value="@HideEasingValue" DataSource="@Ease">
                        <DropDownListEvents TValue="string" ValueChange="@HideEasingChange"></DropDownListEvents>
                        <DropDownListFieldSettings Text="text" Value="value"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
                <div class="input-form">
                    <SfDropDownList @ref="HideDropdownObj" TValue="string" TItem="Positions" ID="HideAnimation" Placeholder="Select an Animation" @bind-Value="@HideAnimationValue" DataSource="@Hide">
                        <DropDownListEvents TValue="string" ValueChange="@HideChange"></DropDownListEvents>
                        <DropDownListFieldSettings Text="text" Value="value"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
        </div>
        <div class="row center">
            <button id="toastBtnShow" class="e-btn e-primary" @onclick="@ShowToast">Show Toasts</button>
            <button id="toastBtnHide" class="e-btn e-primary" @onclick="@HideToastAll">Hide all</button>
        </div>
    </div>
</div>

<style>
    .toast-api-section .row {
        padding: 0 15px;
    }

        .toast-api-section .row .padding {
            padding: 15px;
        }

    .toast-api-section .input-form {
        margin: 33px 0;
    }

    .toast-api-section .group-form.e-group {
        /* margin-top: 35px; */
    }

    .toast-api-section .group-form {
        margin: 25px 0;
    }

    .toast-api-section .row.center {
        text-align: center;
    }

    .toast-api-section .row {
        padding: 0 15px;
    }

        .toast-api-section .row.center {
            text-align: center;
            align-items: center;
            display: block;
        }
</style>

@code {
    SfToast ToastObj;
    SfTextBox TileObj;
    SfTextBox ContentObj;
    SfTextBox TimeoutObj;
    SfTextBox ShowDurationObj;
    SfTextBox HideDurationObj;
    SfDropDownList<string, Easing> EasingDropdownObj;
    SfDropDownList<string, Easing> HideEasingDropdownObj;
    SfDropDownList<string, Positions> ShowDropdownObj;
    SfDropDownList<string, Positions> HideDropdownObj;

    public string ToastTitle { get; set; }
    public bool ShowButtons { get; set; } = false;
    public bool Checked { get; set; } = true;
    public string ShowEasing { get; set; } = "ease";
    public string HideEasing { get; set; } = "ease";
    public string ShowEffect { get; set; }
    public string HideEffect { get; set; }
    public string EasingValue { get; set; } = "ease";
    public string AnimationValue { get; set; } = "SlideBottomIn";
    public string HideEasingValue { get; set; } = "ease";
    public string HideAnimationValue { get; set; } = "SlideBottomOut";
    public string ToastContent { get; set; } = "You have created a Toast message";
    public string TimeoutValue { get; set; } = "5000";
    public double ToastTimeout { get; set; } = 5000;
    public double ShowDuration = 400;
    public double HideDuration = 400;
    public string ShowDurationtValue = "400";
    public string HideDurationtValue = "400";
    private bool ShowCloseBtn = false;
    private bool ShowProgressBtn = false;
    private bool ShowNewestOnTop = true;
    private List<ToastButtonModelProp> ToastButtons;
    public class Positions
    {
        public string value { get; set; }
        public string text { get; set; }
    }
    public class Easing
    {
        public string value { get; set; }
        public string text { get; set; }
    }
    List<Positions> Show = new List<Positions>()
{
        new Positions(){ value= "SlideBottomIn", text= "Slide Bottom In" },
        new Positions(){ value= "FadeIn", text= "Fade In" },
        new Positions(){ value= "FadeZoomIn", text= "Fade Zoom In" },
        new Positions(){ value= "FadeZoomOut", text= "Fade Zoom Out" },
        new Positions(){ value= "FlipLeftDownIn", text= "Flip Left Down In" },
        new Positions(){ value= "FlipLeftDownOut", text= "Flip Left Down Out" },
        new Positions(){ value= "FlipLeftUpIn", text= "Flip Left Up In" },
        new Positions(){ value= "FlipLeftUpOut", text= "Flip Left Up Out" },
        new Positions(){ value= "FlipRightDownIn", text= "Flip Right Down In" },
        new Positions(){ value= "FlipRightDownOut", text= "Flip Right Down Out" },
        new Positions(){ value= "FlipRightUpIn", text= "Flip Right Up In" },
        new Positions(){ value= "FlipRightUpOut", text= "Flip Right Up Out" },
        new Positions(){ value= "SlideBottomOut", text= "Slide Bottom Out" },
        new Positions(){ value= "SlideLeftIn", text= "Slide Left In" },
        new Positions(){ value= "SlideLeftOut", text= "Slide Left Out" },
        new Positions(){ value= "SlideRightIn", text= "Slide Right In" },
        new Positions(){ value= "SlideRightOut", text= "Slide Right Out" },
        new Positions(){ value= "SlideTopIn", text= "Slide Top In" },
        new Positions(){ value= "SlideTopOut", text= "Slide Top Out" },
        new Positions(){ value= "ZoomIn", text= "Zoom In" },
        new Positions(){ value= "ZoomOut", text= "Zoom Out" },
    };
    List<Positions> Hide = new List<Positions>()
{
        new Positions(){ value= "SlideBottomOut", text= "Slide Bottom Out" },
        new Positions(){ value= "FadeIn", text= "Fade In" },
        new Positions(){ value= "FadeZoomIn", text= "Fade Zoom In" },
        new Positions(){ value= "FadeZoomOut", text= "Fade Zoom Out" },
        new Positions(){ value= "FlipLeftDownIn", text= "Flip Left Down In" },
        new Positions(){ value= "FlipLeftDownOut", text= "Flip Left Down Out" },
        new Positions(){ value= "FlipLeftUpIn", text= "Flip Left Up In" },
        new Positions(){ value= "FlipLeftUpOut", text= "Flip Left Up Out" },
        new Positions(){ value= "FlipRightDownIn", text= "Flip Right Down In" },
        new Positions(){ value= "FlipRightDownOut", text= "Flip Right Down Out" },
        new Positions(){ value= "FlipRightUpIn", text= "Flip Right Up In" },
        new Positions(){ value= "FlipRightUpOut", text= "Flip Right Up Out" },
        new Positions(){ value= "SlideBottomOut", text= "Slide Bottom Out" },
        new Positions(){ value= "SlideLeftIn", text= "Slide Left In" },
        new Positions(){ value= "SlideLeftOut", text= "Slide Left Out" },
        new Positions(){ value= "SlideRightIn", text= "Slide Right In" },
        new Positions(){ value= "SlideRightOut", text= "Slide Right Out" },
        new Positions(){ value= "SlideTopIn", text= "Slide Top In" },
        new Positions(){ value= "SlideTopOut", text= "Slide Top Out" },
        new Positions(){ value= "ZoomIn", text= "Zoom In" },
        new Positions(){ value= "ZoomOut", text= "Zoom Out" },
    };
    List<Easing> Ease = new List<Easing>()
    {
        new Easing(){ value= "ease", text= "Ease" },
        new Easing(){ value= "linear", text= "Linear" }
    };

    private async Task ShowToast()
    {
        this.ToastTitle = this.TileObj.Value;
        this.ToastContent = this.ContentObj.Value;
        if (this.TileObj.Value == null && this.ContentObj.Value == null)
        {
            this.ToastContent = "You have created a Toast message";
        }
        this.ShowDuration = Int32.Parse(this.ShowDurationObj.Value);
        this.HideDuration = Int32.Parse(this.HideDurationObj.Value);
        this.ToastTimeout = Int32.Parse(this.TimeoutObj.Value);
        this.StateHasChanged();
        await Task.Delay(100);
        await this.ToastObj.Show();
    }
    private async void HideToast()
    {
        await this.ToastObj.Hide("All");
    }
    private async void HideToastAll()
    {
        await this.ToastObj.Hide("All");
    }

    private void CloseBtnChange(Syncfusion.Blazor.Buttons.ChangeEventArgs arg)
    {
        this.ShowCloseBtn = arg.Checked;
        this.StateHasChanged();
    }
    private void ProgressBtnChange(Syncfusion.Blazor.Buttons.ChangeEventArgs arg)
    {
        this.ShowProgressBtn = arg.Checked;
        this.StateHasChanged();
    }
    private void NewestOnTopChange(Syncfusion.Blazor.Buttons.ChangeEventArgs arg)
    {
        this.ShowNewestOnTop = arg.Checked;
        this.StateHasChanged();
    }
    private async void ActionBtnChange(Syncfusion.Blazor.Buttons.ChangeEventArgs arg)
    {
        if (arg.Checked)
        {
            await this.ToastObj.Hide("All");
            this.ToastButtons = new List<ToastButtonModelProp>() { new ToastButtonModelProp() { Model = new ButtonModel { Content = "Click Here" } } };
        }
        else
        {
            this.ToastButtons = null;
        }
        this.StateHasChanged();
    }
    private void EasingChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> arg)
    {
        this.ShowEasing = this.EasingDropdownObj.Value.ToString();
        this.StateHasChanged();
    }
    private void HideEasingChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> arg)
    {
        this.HideEasing = this.HideEasingDropdownObj.Value.ToString();
        this.StateHasChanged();
    }
    private void ShowChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> arg)
    {
        this.ShowEffect = arg.Value;
        this.StateHasChanged();
    }
    private void HideChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> arg)
    {
        this.HideEffect = arg.Value;
        this.StateHasChanged();
    }
}