@page "/pivot-table/toolbar"

@using Syncfusion.Blazor.PivotView
@inherits SampleBaseComponent;
@using blazor_samples
@using ej2_blazor_productdetails

<div class="control-section">
    <div class="content-wrapper">
        <SfPivotView @ref="@Pivot" TValue="PivotProductDetails" Height="400" Width="100%" ShowFieldList=true ShowToolbar=true Toolbar="@PivotToolbar" AllowNumberFormatting=true AllowConditionalFormatting=true AllowPdfExport=true AllowExcelExport=true EnableValueSorting=true ShowTooltip=false>
            <PivotViewDisplayOption Primary="Primary.Table" View="View.Both"></PivotViewDisplayOption>
            <PivotViewDataSourceSettings DataSource="@Data" ExpandAll=false EnableSorting=true ShowGrandTotals=true ShowSubTotals=true>
                <PivotViewColumns>
                    <PivotViewColumn Name="Year"></PivotViewColumn>
                    <PivotViewColumn Name="Order_Source" Caption="Order Source"></PivotViewColumn>
                </PivotViewColumns>
                <PivotViewRows>
                    <PivotViewRow Name="Country"></PivotViewRow>
                    <PivotViewRow Name="Products"></PivotViewRow>
                </PivotViewRows>
                <PivotViewValues>
                    <PivotViewValue Name="In_Stock" Caption="In Stock"></PivotViewValue>
                    <PivotViewValue Name="Sold" Caption="Units Sold"></PivotViewValue>
                    <PivotViewValue Name="Amount" Caption="Sold Amount"></PivotViewValue>
                </PivotViewValues>
                <PivotViewFilters>
                    <PivotViewFilter Name="Product_Categories" Caption="Product Categories"></PivotViewFilter>
                </PivotViewFilters>
                <PivotViewFormatSettings>
                    <PivotViewFormatSetting Name="Amount" Format="C0" UseGrouping=true></PivotViewFormatSetting>
                </PivotViewFormatSettings>
            </PivotViewDataSourceSettings>
            <PivotChartSettings Title="Sales Analysis">
                <PivotChartPrimaryYAxis>
                    <PivotChartPrimaryYAxisBorder Width="0"></PivotChartPrimaryYAxisBorder>
                </PivotChartPrimaryYAxis>
            </PivotChartSettings>
            <PivotViewGridSettings ColumnWidth="120"></PivotViewGridSettings>
            <PivotViewEvents TValue="PivotProductDetails" RenameReport="RenameReport" RemoveReport="RemoveReport" SaveReport="SaveReport" LoadReport="LoadReport" FetchReport="FetchReport"></PivotViewEvents>
        </SfPivotView>
    </div>
</div>

<style>
    .e-pivotview {
        min-height: 200px;
    }
</style>

@code{
    SfPivotView<PivotProductDetails> Pivot;
    public List<ToolbarItems> PivotToolbar = new List<ToolbarItems> {
        ToolbarItems.New,
        ToolbarItems.Save,
        ToolbarItems.SaveAs,
        ToolbarItems.Rename,
        ToolbarItems.Remove,
        ToolbarItems.Load,
        ToolbarItems.Grid,
        ToolbarItems.Chart,
        ToolbarItems.Export,
        ToolbarItems.SubTotal,
        ToolbarItems.GrandTotal,
        ToolbarItems.Formatting,
        ToolbarItems.FieldList
    };

    public List<PivotProductDetails> Data { get; set; }

    protected override void OnInitialized()
    {
        this.Data = PivotProductDetails.GetProductData();
    }

    public string InitReport { get; set; }
    public string[] Name { get; set; }
    public List<string> Report = new List<string>();
    public List<string> ReportName = new List<string>();
    public async void SaveReport(SaveReportArgs args)
    {
        int i = 0;
        bool IsSaved = false;
        for (i = 0; i < this.ReportName.Count; i++)
        {
            if (this.ReportName[i] == args.ReportName)
            {
                this.Report[i] = args.Report;
                IsSaved = true;
            }
        }
        if (args.Report != null && !(IsSaved))
        {
            this.Report.Add(args.Report);
            this.ReportName.Add(args.ReportName);
        }
    }
    public void FetchReport(FetchReportArgs args)
    {
        args.ReportName = ReportName.ToArray();

    }
    public void LoadReport(LoadReportArgs args)
    {
        int i = 0;
        int j = 0;
        for (i = 0; i < ReportName.Count; i++)
        {
            if (ReportName[i] == args.ReportName)
            {
                j = i;
            }
        }
        this.Pivot.LoadPersistData(Report[j]);
    }
    public void RemoveReport(RemoveReportArgs args)
    {
        int i = 0;
        for (i = 0; i < ReportName.Count; i++)
        {
            if (ReportName[i] == args.ReportName)
            {
                ReportName.RemoveAt(i);
                Report.RemoveAt(i);
                break;
            }
        }
        if (Report.Count > 0)
        {
            this.Pivot.LoadPersistData(Report[0]);
        }
    }
    public void RenameReport(RenameReportArgs args)
    {
        if (args.IsReportExists) {
            int j = 0;
            for (j = 0; j < ReportName.Count; j++)
            {
                if (ReportName[j] == args.Rename)
                {
                    ReportName.RemoveAt(j);
                    Report.RemoveAt(j);
                    break;
                }
            }
        }
        int i = 0;
        for (i = 0; i <= (ReportName.Count - 1); i++)
        {
            if (ReportName[i] == args.ReportName)
            {
                ReportName.RemoveAt(i);
                ReportName.Add(args.Rename);
            }
        }

    }
}